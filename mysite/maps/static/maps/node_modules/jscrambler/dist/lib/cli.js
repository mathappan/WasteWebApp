'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeAndParseParams = mergeAndParseParams;

var _lodash = require('lodash.clone');

var _lodash2 = _interopRequireDefault(_lodash);

var _snakeCase = require('snake-case');

var _snakeCase2 = _interopRequireDefault(_snakeCase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Override params file changes with any specified command line options
// TODO Populate this list based on an external JSON
var isBoolFlag = {
  booleanToAnything: true,
  charToTernaryOperator: false,
  commaOperatorUnfolding: true,
  controlFlowFlattening: false,
  deadCodeInjection: true,
  dotToBracketNotation: true,
  duplicateLiteralsRemoval: false,
  extendPredicates: true,
  functionOutlining: true,
  functionReorder: true,
  identifiersRenaming: false,
  numberToString: true,
  propertyKeysObfuscation: true,
  propertyKeysReordering: true,
  regexObfuscation: true,
  stringConcealing: true,
  stringEncoding: true,
  stringSplitting: false,
  variableGrouping: true,
  assertionsRemoval: false,
  constantFolding: true,
  deadCodeElimination: true,
  debugCodeElimination: false,
  whitespaceRemoval: true,
  selfDefending: false,
  browserLock: false,
  dateLock: false,
  domainLock: false,
  osLock: false,
  preserveAnnotations: true
};

// Convert from command line option format to JScrambler API format.
function mergeAndParseParams(commander, params) {
  params = (0, _lodash2.default)(params || {});

  for (var name in isBoolFlag) {
    if (commander[name] !== undefined) {
      var snakeCaseName = (0, _snakeCase2.default)(name);
      if (isBoolFlag[name] === true) {
        params[snakeCaseName] = {
          status: 1
        };
      } else {
        params[snakeCaseName] = commander[name];
      }
      if (typeof params[snakeCaseName].status === 'undefined') {
        params[snakeCaseName].status = 1;
      }
    }
  }

  return params;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY2xpLmpzIl0sIm5hbWVzIjpbIm1lcmdlQW5kUGFyc2VQYXJhbXMiLCJpc0Jvb2xGbGFnIiwiYm9vbGVhblRvQW55dGhpbmciLCJjaGFyVG9UZXJuYXJ5T3BlcmF0b3IiLCJjb21tYU9wZXJhdG9yVW5mb2xkaW5nIiwiY29udHJvbEZsb3dGbGF0dGVuaW5nIiwiZGVhZENvZGVJbmplY3Rpb24iLCJkb3RUb0JyYWNrZXROb3RhdGlvbiIsImR1cGxpY2F0ZUxpdGVyYWxzUmVtb3ZhbCIsImV4dGVuZFByZWRpY2F0ZXMiLCJmdW5jdGlvbk91dGxpbmluZyIsImZ1bmN0aW9uUmVvcmRlciIsImlkZW50aWZpZXJzUmVuYW1pbmciLCJudW1iZXJUb1N0cmluZyIsInByb3BlcnR5S2V5c09iZnVzY2F0aW9uIiwicHJvcGVydHlLZXlzUmVvcmRlcmluZyIsInJlZ2V4T2JmdXNjYXRpb24iLCJzdHJpbmdDb25jZWFsaW5nIiwic3RyaW5nRW5jb2RpbmciLCJzdHJpbmdTcGxpdHRpbmciLCJ2YXJpYWJsZUdyb3VwaW5nIiwiYXNzZXJ0aW9uc1JlbW92YWwiLCJjb25zdGFudEZvbGRpbmciLCJkZWFkQ29kZUVsaW1pbmF0aW9uIiwiZGVidWdDb2RlRWxpbWluYXRpb24iLCJ3aGl0ZXNwYWNlUmVtb3ZhbCIsInNlbGZEZWZlbmRpbmciLCJicm93c2VyTG9jayIsImRhdGVMb2NrIiwiZG9tYWluTG9jayIsIm9zTG9jayIsInByZXNlcnZlQW5ub3RhdGlvbnMiLCJjb21tYW5kZXIiLCJwYXJhbXMiLCJuYW1lIiwidW5kZWZpbmVkIiwic25ha2VDYXNlTmFtZSIsInN0YXR1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUF1Q2dCQSxtQixHQUFBQSxtQjs7QUF2Q2hCOzs7O0FBQ0E7Ozs7OztBQUVBO0FBQ0E7QUFDQSxJQUFNQyxhQUFhO0FBQ2pCQyxxQkFBbUIsSUFERjtBQUVqQkMseUJBQXVCLEtBRk47QUFHakJDLDBCQUF3QixJQUhQO0FBSWpCQyx5QkFBdUIsS0FKTjtBQUtqQkMscUJBQW1CLElBTEY7QUFNakJDLHdCQUFzQixJQU5MO0FBT2pCQyw0QkFBMEIsS0FQVDtBQVFqQkMsb0JBQWtCLElBUkQ7QUFTakJDLHFCQUFtQixJQVRGO0FBVWpCQyxtQkFBaUIsSUFWQTtBQVdqQkMsdUJBQXFCLEtBWEo7QUFZakJDLGtCQUFnQixJQVpDO0FBYWpCQywyQkFBeUIsSUFiUjtBQWNqQkMsMEJBQXdCLElBZFA7QUFlakJDLG9CQUFrQixJQWZEO0FBZ0JqQkMsb0JBQWtCLElBaEJEO0FBaUJqQkMsa0JBQWdCLElBakJDO0FBa0JqQkMsbUJBQWlCLEtBbEJBO0FBbUJqQkMsb0JBQWtCLElBbkJEO0FBb0JqQkMscUJBQW1CLEtBcEJGO0FBcUJqQkMsbUJBQWlCLElBckJBO0FBc0JqQkMsdUJBQXFCLElBdEJKO0FBdUJqQkMsd0JBQXNCLEtBdkJMO0FBd0JqQkMscUJBQW1CLElBeEJGO0FBeUJqQkMsaUJBQWUsS0F6QkU7QUEwQmpCQyxlQUFhLEtBMUJJO0FBMkJqQkMsWUFBVSxLQTNCTztBQTRCakJDLGNBQVksS0E1Qks7QUE2QmpCQyxVQUFRLEtBN0JTO0FBOEJqQkMsdUJBQXFCO0FBOUJKLENBQW5COztBQWlDQTtBQUNPLFNBQVMvQixtQkFBVCxDQUE4QmdDLFNBQTlCLEVBQXlDQyxNQUF6QyxFQUFpRDtBQUN0REEsV0FBUyxzQkFBTUEsVUFBVSxFQUFoQixDQUFUOztBQUVBLE9BQUssSUFBSUMsSUFBVCxJQUFpQmpDLFVBQWpCLEVBQTZCO0FBQzNCLFFBQUkrQixVQUFVRSxJQUFWLE1BQW9CQyxTQUF4QixFQUFtQztBQUNqQyxVQUFJQyxnQkFBZ0IseUJBQVVGLElBQVYsQ0FBcEI7QUFDQSxVQUFJakMsV0FBV2lDLElBQVgsTUFBcUIsSUFBekIsRUFBK0I7QUFDN0JELGVBQU9HLGFBQVAsSUFBd0I7QUFDdEJDLGtCQUFRO0FBRGMsU0FBeEI7QUFHRCxPQUpELE1BSU87QUFDTEosZUFBT0csYUFBUCxJQUF3QkosVUFBVUUsSUFBVixDQUF4QjtBQUNEO0FBQ0QsVUFBSSxPQUFPRCxPQUFPRyxhQUFQLEVBQXNCQyxNQUE3QixLQUF3QyxXQUE1QyxFQUF5RDtBQUN2REosZUFBT0csYUFBUCxFQUFzQkMsTUFBdEIsR0FBK0IsQ0FBL0I7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBT0osTUFBUDtBQUNEIiwiZmlsZSI6ImNsaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbG9uZSBmcm9tICdsb2Rhc2guY2xvbmUnO1xuaW1wb3J0IHNuYWtlQ2FzZSBmcm9tICdzbmFrZS1jYXNlJztcblxuLy8gT3ZlcnJpZGUgcGFyYW1zIGZpbGUgY2hhbmdlcyB3aXRoIGFueSBzcGVjaWZpZWQgY29tbWFuZCBsaW5lIG9wdGlvbnNcbi8vIFRPRE8gUG9wdWxhdGUgdGhpcyBsaXN0IGJhc2VkIG9uIGFuIGV4dGVybmFsIEpTT05cbmNvbnN0IGlzQm9vbEZsYWcgPSB7XG4gIGJvb2xlYW5Ub0FueXRoaW5nOiB0cnVlLFxuICBjaGFyVG9UZXJuYXJ5T3BlcmF0b3I6IGZhbHNlLFxuICBjb21tYU9wZXJhdG9yVW5mb2xkaW5nOiB0cnVlLFxuICBjb250cm9sRmxvd0ZsYXR0ZW5pbmc6IGZhbHNlLFxuICBkZWFkQ29kZUluamVjdGlvbjogdHJ1ZSxcbiAgZG90VG9CcmFja2V0Tm90YXRpb246IHRydWUsXG4gIGR1cGxpY2F0ZUxpdGVyYWxzUmVtb3ZhbDogZmFsc2UsXG4gIGV4dGVuZFByZWRpY2F0ZXM6IHRydWUsXG4gIGZ1bmN0aW9uT3V0bGluaW5nOiB0cnVlLFxuICBmdW5jdGlvblJlb3JkZXI6IHRydWUsXG4gIGlkZW50aWZpZXJzUmVuYW1pbmc6IGZhbHNlLFxuICBudW1iZXJUb1N0cmluZzogdHJ1ZSxcbiAgcHJvcGVydHlLZXlzT2JmdXNjYXRpb246IHRydWUsXG4gIHByb3BlcnR5S2V5c1Jlb3JkZXJpbmc6IHRydWUsXG4gIHJlZ2V4T2JmdXNjYXRpb246IHRydWUsXG4gIHN0cmluZ0NvbmNlYWxpbmc6IHRydWUsXG4gIHN0cmluZ0VuY29kaW5nOiB0cnVlLFxuICBzdHJpbmdTcGxpdHRpbmc6IGZhbHNlLFxuICB2YXJpYWJsZUdyb3VwaW5nOiB0cnVlLFxuICBhc3NlcnRpb25zUmVtb3ZhbDogZmFsc2UsXG4gIGNvbnN0YW50Rm9sZGluZzogdHJ1ZSxcbiAgZGVhZENvZGVFbGltaW5hdGlvbjogdHJ1ZSxcbiAgZGVidWdDb2RlRWxpbWluYXRpb246IGZhbHNlLFxuICB3aGl0ZXNwYWNlUmVtb3ZhbDogdHJ1ZSxcbiAgc2VsZkRlZmVuZGluZzogZmFsc2UsXG4gIGJyb3dzZXJMb2NrOiBmYWxzZSxcbiAgZGF0ZUxvY2s6IGZhbHNlLFxuICBkb21haW5Mb2NrOiBmYWxzZSxcbiAgb3NMb2NrOiBmYWxzZSxcbiAgcHJlc2VydmVBbm5vdGF0aW9uczogdHJ1ZVxufTtcblxuLy8gQ29udmVydCBmcm9tIGNvbW1hbmQgbGluZSBvcHRpb24gZm9ybWF0IHRvIEpTY3JhbWJsZXIgQVBJIGZvcm1hdC5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUFuZFBhcnNlUGFyYW1zIChjb21tYW5kZXIsIHBhcmFtcykge1xuICBwYXJhbXMgPSBjbG9uZShwYXJhbXMgfHwge30pO1xuXG4gIGZvciAobGV0IG5hbWUgaW4gaXNCb29sRmxhZykge1xuICAgIGlmIChjb21tYW5kZXJbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHNuYWtlQ2FzZU5hbWUgPSBzbmFrZUNhc2UobmFtZSk7XG4gICAgICBpZiAoaXNCb29sRmxhZ1tuYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgICBwYXJhbXNbc25ha2VDYXNlTmFtZV0gPSB7XG4gICAgICAgICAgc3RhdHVzOiAxXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXNbc25ha2VDYXNlTmFtZV0gPSBjb21tYW5kZXJbbmFtZV07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmFtc1tzbmFrZUNhc2VOYW1lXS5zdGF0dXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHBhcmFtc1tzbmFrZUNhc2VOYW1lXS5zdGF0dXMgPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJhbXM7XG59XG4iXX0=
