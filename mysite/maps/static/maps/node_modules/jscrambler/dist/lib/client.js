'use strict';

var _lodash = require('lodash.clone');

var _lodash2 = _interopRequireDefault(_lodash);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _lodash3 = require('lodash.defaults');

var _lodash4 = _interopRequireDefault(_lodash3);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _lodash5 = require('lodash.keys');

var _lodash6 = _interopRequireDefault(_lodash5);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _generateSignedParams = require('./generate-signed-params');

var _generateSignedParams2 = _interopRequireDefault(_generateSignedParams);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = !!process.env.DEBUG;

/**
 * @class JScramblerClient
 * @param {Object} options
 * @param {String} options.accessKey
 * @param {String} options.secretKey
 * @param {String} [options.host=api.jscrambler.com]
 * @param {String} [options.port=443]
 * @author José Magalhães (magalhas@gmail.com)
 * @license MIT <http://opensource.org/licenses/MIT>
 */

function JScramblerClient(options) {
  // Sluggish hack for backwards compatibility
  if (options && !options.keys && (options.accessKey || options.secretKey)) {
    options.keys = {};
    options.keys.accessKey = options.accessKey;
    options.keys.secretKey = options.secretKey;
  }

  options.keys = (0, _lodash4.default)(options.keys || {}, _config2.default.keys);

  /**
   * @member
   */
  this.options = (0, _lodash4.default)(options || {}, _config2.default);

  if (this.options.jscramblerVersion) {
    _axios2.default.defaults.headers.common.jscramblerVersion = this.options.jscramblerVersion;
  }
}
/**
 * Delete request.
 * @param {String} path
 * @param {Object} params
 * @param {Callback} callback
 */
JScramblerClient.prototype.delete = function (path, params, callback) {
  return this.request('DELETE', path, params, callback);
};
/**
 * Get request.
 * @param {String} path
 * @param {Object} params
 * @param {Callback} callback
 */
JScramblerClient.prototype.get = function (path, params, callback) {
  var isJSON = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

  return this.request('GET', path, params, callback, isJSON);
};
/**
 * HTTP request.
 * @param {String} method
 * @param {String} path
 * @param {Object} params
 * @param {Callback} callback
 */
JScramblerClient.prototype.request = function (method, path) {
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var isJSON = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

  var signedData;
  if (this.token) {
    params.token = this.token;
  } else {
    if (!this.options.keys.accessKey) {
      throw new Error('Required *accessKey* not provided');
    }

    if (!this.options.keys.secretKey) {
      throw new Error('Required *secretKey* not provided');
    }
  }

  var _keys = (0, _lodash6.default)(params);
  for (var i = 0, l = _keys.length; i < l; i++) {
    if (params[_keys[i]] instanceof Array) {
      params[_keys[i]] = params[_keys[i]].join(',');
    }
  }

  // If post sign data and set the request as multipart
  if (this.options.keys.accessKey && this.options.keys.secretKey) {
    signedData = (0, _generateSignedParams2.default)(method, path, this.options.host, this.options.keys, params);
  } else {
    signedData = params;
  }

  // Format URL
  var protocol = this.options.protocol || (this.options.port === 443 ? 'https' : 'http');

  var formatedUrl = _url2.default.format({
    hostname: this.options.host,
    port: this.options.port,
    protocol: protocol
  }) + path;

  var data,
      settings = {};

  if (!isJSON) {
    settings.responseType = 'arraybuffer';
  }

  // Internal CA
  if (this.options.cafile) {
    var agent = new _https2.default.Agent({
      ca: _fs2.default.readFileSync(this.options.cafile)
    });
    settings.agent = agent;
  }

  var promise;

  if (method === 'GET' || method === 'DELETE') {
    settings.params = signedData;
    promise = _axios2.default[method.toLowerCase()](formatedUrl, settings);
  } else {
    data = signedData;
    promise = _axios2.default[method.toLowerCase()](formatedUrl, data, settings);
  }

  return promise.then(function (res) {
    return callback(null, res);
  }).catch(function (error) {
    return callback(error);
  });
};
/**
 * Post request.
 * @param {String} path
 * @param {Object} params
 * @param {Callback} callback
 */
JScramblerClient.prototype.post = function (path, params, callback) {
  return this.request('POST', path, params, callback);
};

exports = module.exports = JScramblerClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvY2xpZW50LmpzIl0sIm5hbWVzIjpbImRlYnVnIiwicHJvY2VzcyIsImVudiIsIkRFQlVHIiwiSlNjcmFtYmxlckNsaWVudCIsIm9wdGlvbnMiLCJrZXlzIiwiYWNjZXNzS2V5Iiwic2VjcmV0S2V5IiwianNjcmFtYmxlclZlcnNpb24iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJwcm90b3R5cGUiLCJkZWxldGUiLCJwYXRoIiwicGFyYW1zIiwiY2FsbGJhY2siLCJyZXF1ZXN0IiwiZ2V0IiwiaXNKU09OIiwibWV0aG9kIiwic2lnbmVkRGF0YSIsInRva2VuIiwiRXJyb3IiLCJfa2V5cyIsImkiLCJsIiwibGVuZ3RoIiwiQXJyYXkiLCJqb2luIiwiaG9zdCIsInByb3RvY29sIiwicG9ydCIsImZvcm1hdGVkVXJsIiwiZm9ybWF0IiwiaG9zdG5hbWUiLCJkYXRhIiwic2V0dGluZ3MiLCJyZXNwb25zZVR5cGUiLCJjYWZpbGUiLCJhZ2VudCIsIkFnZW50IiwiY2EiLCJyZWFkRmlsZVN5bmMiLCJwcm9taXNlIiwidG9Mb3dlckNhc2UiLCJ0aGVuIiwicmVzIiwiY2F0Y2giLCJlcnJvciIsInBvc3QiLCJleHBvcnRzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxRQUFRLENBQUMsQ0FBQ0MsUUFBUUMsR0FBUixDQUFZQyxLQUE1Qjs7QUFFQTs7Ozs7Ozs7Ozs7QUFXQSxTQUFTQyxnQkFBVCxDQUEyQkMsT0FBM0IsRUFBb0M7QUFDbEM7QUFDQSxNQUFJQSxXQUFXLENBQUNBLFFBQVFDLElBQXBCLEtBQTZCRCxRQUFRRSxTQUFSLElBQXFCRixRQUFRRyxTQUExRCxDQUFKLEVBQTBFO0FBQ3hFSCxZQUFRQyxJQUFSLEdBQWUsRUFBZjtBQUNBRCxZQUFRQyxJQUFS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QUQ7QUFBQSxXQUFXakMsU0FBU2lDLEtBQVQsQ0FBWDtBQUFBLEdBRkYsQ0FBUDtBQUdELENBaEVEO0FBaUVBOzs7Ozs7QUFNQTlDLGlCQUFpQlMsU0FBakIsQ0FBMkJzQyxJQUEzQixHQUFrQyxVQUFVcEMsSUFBVixFQUFnQkMsTUFBaEIsRUFBd0JDLFFBQXhCLEVBQWtDO0FBQ2xFLFNBQU8sS0FBS0MsT0FBTCxDQUFhLE1BQWIsRUFBcUJILElBQXJCLEVBQTJCQyxNQUEzQixFQUFtQ0MsUUFBbkMsQ0FBUDtBQUNELENBRkQ7O0FBSUFtQyxVQUFVQyxPQUFPRCxPQUFQLEdBQWlCaEQsZ0JBQTNCIiwiZmlsZSI6ImNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbG9uZSBmcm9tICdsb2Rhc2guY2xvbmUnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJ2xvZGFzaC5kZWZhdWx0cyc7XG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IGtleXMgZnJvbSAnbG9kYXNoLmtleXMnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcblxuaW1wb3J0IGNmZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgZ2VuZXJhdGVTaWduZWRQYXJhbXMgZnJvbSAnLi9nZW5lcmF0ZS1zaWduZWQtcGFyYW1zJztcblxuY29uc3QgZGVidWcgPSAhIXByb2Nlc3MuZW52LkRFQlVHO1xuXG4vKipcbiAqIEBjbGFzcyBKU2NyYW1ibGVyQ2xpZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuYWNjZXNzS2V5XG4gKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5zZWNyZXRLZXlcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5ob3N0PWFwaS5qc2NyYW1ibGVyLmNvbV1cbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5wb3J0PTQ0M11cbiAqIEBhdXRob3IgSm9zw6kgTWFnYWxow6NlcyAobWFnYWxoYXNAZ21haWwuY29tKVxuICogQGxpY2Vuc2UgTUlUIDxodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUPlxuICovXG5cbmZ1bmN0aW9uIEpTY3JhbWJsZXJDbGllbnQgKG9wdGlvbnMpIHtcbiAgLy8gU2x1Z2dpc2ggaGFjayBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgaWYgKG9wdGlvbnMgJiYgIW9wdGlvbnMua2V5cyAmJiAob3B0aW9ucy5hY2Nlc3NLZXkgfHwgb3B0aW9ucy5zZWNyZXRLZXkpKSB7XG4gICAgb3B0aW9ucy5rZXlzID0ge307XG4gICAgb3B0aW9ucy5rZXlzLmFjY2Vzc0tleSA9IG9wdGlvbnMuYWNjZXNzS2V5O1xuICAgIG9wdGlvbnMua2V5cy5zZWNyZXRLZXkgPSBvcHRpb25zLnNlY3JldEtleTtcbiAgfVxuXG4gIG9wdGlvbnMua2V5cyA9IGRlZmF1bHRzKG9wdGlvbnMua2V5cyB8fCB7fSwgY2ZnLmtleXMpO1xuXG4gIC8qKlxuICAgKiBAbWVtYmVyXG4gICAqL1xuICB0aGlzLm9wdGlvbnMgPSBkZWZhdWx0cyhvcHRpb25zIHx8IHt9LCBjZmcpO1xuXG4gIGlmICh0aGlzLm9wdGlvbnMuanNjcmFtYmxlclZlcnNpb24pIHtcbiAgICByZXF1ZXN0LmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLmpzY3JhbWJsZXJWZXJzaW9uID0gdGhpcy5vcHRpb25zLmpzY3JhbWJsZXJWZXJzaW9uO1xuICB9XG59XG4vKipcbiAqIERlbGV0ZSByZXF1ZXN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7Q2FsbGJhY2t9IGNhbGxiYWNrXG4gKi9cbkpTY3JhbWJsZXJDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChwYXRoLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0aGlzLnJlcXVlc3QoJ0RFTEVURScsIHBhdGgsIHBhcmFtcywgY2FsbGJhY2spO1xufTtcbi8qKlxuICogR2V0IHJlcXVlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuSlNjcmFtYmxlckNsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHBhdGgsIHBhcmFtcywgY2FsbGJhY2ssIGlzSlNPTiA9IHRydWUpIHtcbiAgcmV0dXJuIHRoaXMucmVxdWVzdCgnR0VUJywgcGF0aCwgcGFyYW1zLCBjYWxsYmFjaywgaXNKU09OKTtcbn07XG4vKipcbiAqIEhUVFAgcmVxdWVzdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge0NhbGxiYWNrfSBjYWxsYmFja1xuICovXG5KU2NyYW1ibGVyQ2xpZW50LnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG1ldGhvZCwgcGF0aCwgcGFyYW1zID0ge30sIGNhbGxiYWNrID0gbnVsbCwgaXNKU09OID0gdHJ1ZSkge1xuICB2YXIgc2lnbmVkRGF0YTtcbiAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICBwYXJhbXMudG9rZW4gPSB0aGlzLnRva2VuO1xuICB9IGVsc2Uge1xuICAgIGlmICghdGhpcy5vcHRpb25zLmtleXMuYWNjZXNzS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkICphY2Nlc3NLZXkqIG5vdCBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmtleXMuc2VjcmV0S2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlcXVpcmVkICpzZWNyZXRLZXkqIG5vdCBwcm92aWRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfa2V5cyA9IGtleXMocGFyYW1zKTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBfa2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZihwYXJhbXNbX2tleXNbaV1dIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIHBhcmFtc1tfa2V5c1tpXV0gPSBwYXJhbXNbX2tleXNbaV1dLmpvaW4oJywnKTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiBwb3N0IHNpZ24gZGF0YSBhbmQgc2V0IHRoZSByZXF1ZXN0IGFzIG11bHRpcGFydFxuICBpZiAodGhpcy5vcHRpb25zLmtleXMuYWNjZXNzS2V5ICYmIHRoaXMub3B0aW9ucy5rZXlzLnNlY3JldEtleSkge1xuICAgIHNpZ25lZERhdGEgPSBnZW5lcmF0ZVNpZ25lZFBhcmFtcyhtZXRob2QsIHBhdGgsIHRoaXMub3B0aW9ucy5ob3N0LCB0aGlzLm9wdGlvbnMua2V5cywgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBzaWduZWREYXRhID0gcGFyYW1zO1xuICB9XG5cbiAgLy8gRm9ybWF0IFVSTFxuICB2YXIgcHJvdG9jb2wgPSB0aGlzLm9wdGlvbnMucHJvdG9jb2wgfHwgKHRoaXMub3B0aW9ucy5wb3J0ID09PSA0NDMgPyAnaHR0cHMnIDogJ2h0dHAnKTtcblxuICB2YXIgZm9ybWF0ZWRVcmwgPSB1cmwuZm9ybWF0KHtcbiAgICBob3N0bmFtZTogdGhpcy5vcHRpb25zLmhvc3QsXG4gICAgcG9ydDogdGhpcy5vcHRpb25zLnBvcnQsXG4gICAgcHJvdG9jb2w6IHByb3RvY29sXG4gIH0pICsgcGF0aDtcblxuICB2YXIgZGF0YSwgc2V0dGluZ3MgPSB7fTtcblxuICBpZiAoIWlzSlNPTikge1xuICAgIHNldHRpbmdzLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gIH1cblxuICAvLyBJbnRlcm5hbCBDQVxuICBpZiAodGhpcy5vcHRpb25zLmNhZmlsZSkge1xuICAgIHZhciBhZ2VudCA9IG5ldyBodHRwcy5BZ2VudCh7XG4gICAgICBjYTogZnMucmVhZEZpbGVTeW5jKHRoaXMub3B0aW9ucy5jYWZpbGUpXG4gICAgfSk7XG4gICAgc2V0dGluZ3MuYWdlbnQgPSBhZ2VudDtcbiAgfVxuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmIChtZXRob2QgPT09ICdHRVQnIHx8IG1ldGhvZCA9PT0gJ0RFTEVURScpIHtcbiAgICBzZXR0aW5ncy5wYXJhbXMgPSBzaWduZWREYXRhO1xuICAgIHByb21pc2UgPSByZXF1ZXN0W21ldGhvZC50b0xvd2VyQ2FzZSgpXShmb3JtYXRlZFVybCwgc2V0dGluZ3MpO1xuICB9IGVsc2Uge1xuICAgIGRhdGEgPSBzaWduZWREYXRhO1xuICAgIHByb21pc2UgPSByZXF1ZXN0W21ldGhvZC50b0xvd2VyQ2FzZSgpXShmb3JtYXRlZFVybCwgZGF0YSwgc2V0dGluZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2VcbiAgICAudGhlbigocmVzKSA9PiBjYWxsYmFjayhudWxsLCByZXMpKVxuICAgIC5jYXRjaCgoZXJyb3IpID0+IGNhbGxiYWNrKGVycm9yKSk7XG59O1xuLyoqXG4gKiBQb3N0IHJlcXVlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtDYWxsYmFja30gY2FsbGJhY2tcbiAqL1xuSlNjcmFtYmxlckNsaWVudC5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChwYXRoLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCBwYXRoLCBwYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IEpTY3JhbWJsZXJDbGllbnQ7XG4iXX0=
