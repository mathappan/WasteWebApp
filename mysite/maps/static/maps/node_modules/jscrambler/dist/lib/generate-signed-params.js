'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = signedParams;

var _lodash = require('lodash.clone');

var _lodash2 = _interopRequireDefault(_lodash);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _lodash3 = require('lodash.defaults');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.keys');

var _lodash6 = _interopRequireDefault(_lodash5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = !!process.env.DEBUG;

function signedParams(method, path, host, keys) {
  var params = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  params = (0, _lodash4.default)((0, _lodash2.default)(params), {
    access_key: keys.accessKey,
    timestamp: new Date().toISOString()
  });
  params.signature = generateHmacSignature(method, path, host, keys, params);
  return params;
}

function generateHmacSignature(method, path, host, keys, params) {
  var paramsCopy = (0, _lodash2.default)(params);
  var signatureData = method.toUpperCase() + ';' + host.toLowerCase() + ';' + path + ';' + buildSortedQuery(paramsCopy);
  debug && console.log('Signature data: ' + signatureData);
  var hmac = _crypto2.default.createHmac('sha256', keys.secretKey.toUpperCase());
  hmac.update(signatureData);
  return hmac.digest('base64');
}

function buildSortedQuery(params) {
  // Sorted keys
  var _keys = (0, _lodash6.default)(params).sort();
  var query = '';
  for (var i = 0, l = _keys.length; i < l; i++) {
    query += encodeURIComponent(_keys[i]) + '=' + encodeURIComponent(params[_keys[i]]) + '&';
  }
  query = query.replace(/\*/g, '%2A').replace(/[!'()]/g, escape).replace(/%7E/g, '~').replace(/\+/g, '%20');
  // Strip the last separator and return
  return query.substring(0, query.length - 1);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZ2VuZXJhdGUtc2lnbmVkLXBhcmFtcy5qcyJdLCJuYW1lcyI6WyJzaWduZWRQYXJhbXMiLCJkZWJ1ZyIsInByb2Nlc3MiLCJlbnYiLCJERUJVRyIsIm1ldGhvZCIsInBhdGgiLCJob3N0Iiwia2V5cyIsInBhcmFtcyIsImFjY2Vzc19rZXkiLCJhY2Nlc3NLZXkiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzaWduYXR1cmUiLCJnZW5lcmF0ZUhtYWNTaWduYXR1cmUiLCJwYXJhbXNDb3B5Iiwic2lnbmF0dXJlRGF0YSIsInRvVXBwZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJidWlsZFNvcnRlZFF1ZXJ5IiwiY29uc29sZSIsImxvZyIsImhtYWMiLCJjcmVhdGVIbWFjIiwic2VjcmV0S2V5IiwidXBkYXRlIiwiZGlnZXN0IiwiX2tleXMiLCJzb3J0IiwicXVlcnkiLCJpIiwibCIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJlc2NhcGUiLCJzdWJzdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU93QkEsWTs7QUFQeEI7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQU1DLFFBQVEsQ0FBQyxDQUFDQyxRQUFRQyxHQUFSLENBQVlDLEtBQTVCOztBQUVlLFNBQVNKLFlBQVQsQ0FBdUJLLE1BQXZCLEVBQStCQyxJQUEvQixFQUFxQ0MsSUFBckMsRUFBMkNDLElBQTNDLEVBQThEO0FBQUEsTUFBYkMsTUFBYSx1RUFBSixFQUFJOztBQUMzRUEsV0FBUyxzQkFBUyxzQkFBTUEsTUFBTixDQUFULEVBQXdCO0FBQy9CQyxnQkFBWUYsS0FBS0csU0FEYztBQUUvQkMsZUFBVyxJQUFJQyxJQUFKLEdBQVdDLFdBQVg7QUFGb0IsR0FBeEIsQ0FBVDtBQUlBTCxTQUFPTSxTQUFQLEdBQW1CQyxzQkFBc0JYLE1BQXRCLEVBQThCQyxJQUE5QixFQUFvQ0MsSUFBcEMsRUFBMENDLElBQTFDLEVBQWdEQyxNQUFoRCxDQUFuQjtBQUNBLFNBQU9BLE1BQVA7QUFDRDs7QUFFRCxTQUFTTyxxQkFBVCxDQUFnQ1gsTUFBaEMsRUFBd0NDLElBQXhDLEVBQThDQyxJQUE5QyxFQUFvREMsSUFBcEQsRUFBMERDLE1BQTFELEVBQWtFO0FBQ2hFLE1BQUlRLGFBQWEsc0JBQU1SLE1BQU4sQ0FBakI7QUFDQSxNQUFJUyxnQkFBZ0JiLE9BQU9jLFdBQVAsS0FBdUIsR0FBdkIsR0FBNkJaLEtBQUthLFdBQUwsRUFBN0IsR0FDbEIsR0FEa0IsR0FDWmQsSUFEWSxHQUNMLEdBREssR0FDQ2UsaUJBQWlCSixVQUFqQixDQURyQjtBQUVBaEIsV0FBU3FCLFFBQVFDLEdBQVIsQ0FBWSxxQkFBcUJMLGFBQWpDLENBQVQ7QUFDQSxNQUFJTSxPQUFPLGlCQUFPQyxVQUFQLENBQWtCLFFBQWxCLEVBQTRCakIsS0FBS2tCLFNBQUwsQ0FBZVAsV0FBZixFQUE1QixDQUFYO0FBQ0FLLE9BQUtHLE1BQUwsQ0FBWVQsYUFBWjtBQUNBLFNBQU9NLEtBQUtJLE1BQUwsQ0FBWSxRQUFaLENBQVA7QUFDRDs7QUFFRCxTQUFTUCxnQkFBVCxDQUEyQlosTUFBM0IsRUFBbUM7QUFDakM7QUFDQSxNQUFJb0IsUUFBUSxzQkFBS3BCLE1BQUwsRUFBYXFCLElBQWIsRUFBWjtBQUNBLE1BQUlDLFFBQVEsRUFBWjtBQUNBLE9BQUssSUFBSUMsSUFBSSxDQUFSLEVBQVdDLElBQUlKLE1BQU1LLE1BQTFCLEVBQWtDRixJQUFJQyxDQUF0QyxFQUF5Q0QsR0FBekMsRUFBOEM7QUFDNUNELGFBQVNJLG1CQUFtQk4sTUFBTUcsQ0FBTixDQUFuQixJQUErQixHQUEvQixHQUFxQ0csbUJBQW1CMUIsT0FBT29CLE1BQU1HLENBQU4sQ0FBUCxDQUFuQixDQUFyQyxHQUE0RSxHQUFyRjtBQUNEO0FBQ0RELFVBQVFBLE1BQ0xLLE9BREssQ0FDRyxLQURILEVBQ1UsS0FEVixFQUVMQSxPQUZLLENBRUcsU0FGSCxFQUVjQyxNQUZkLEVBR0xELE9BSEssQ0FHRyxNQUhILEVBR1csR0FIWCxFQUlMQSxPQUpLLENBSUcsS0FKSCxFQUlVLEtBSlYsQ0FBUjtBQUtBO0FBQ0EsU0FBT0wsTUFBTU8sU0FBTixDQUFnQixDQUFoQixFQUFtQlAsTUFBTUcsTUFBTixHQUFlLENBQWxDLENBQVA7QUFDRCIsImZpbGUiOiJnZW5lcmF0ZS1zaWduZWQtcGFyYW1zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNsb25lIGZyb20gJ2xvZGFzaC5jbG9uZSc7XG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnbG9kYXNoLmRlZmF1bHRzJztcbmltcG9ydCBrZXlzIGZyb20gJ2xvZGFzaC5rZXlzJztcblxuY29uc3QgZGVidWcgPSAhIXByb2Nlc3MuZW52LkRFQlVHO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaWduZWRQYXJhbXMgKG1ldGhvZCwgcGF0aCwgaG9zdCwga2V5cywgcGFyYW1zID0ge30pIHtcbiAgcGFyYW1zID0gZGVmYXVsdHMoY2xvbmUocGFyYW1zKSwge1xuICAgIGFjY2Vzc19rZXk6IGtleXMuYWNjZXNzS2V5LFxuICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIH0pO1xuICBwYXJhbXMuc2lnbmF0dXJlID0gZ2VuZXJhdGVIbWFjU2lnbmF0dXJlKG1ldGhvZCwgcGF0aCwgaG9zdCwga2V5cywgcGFyYW1zKTtcbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVIbWFjU2lnbmF0dXJlIChtZXRob2QsIHBhdGgsIGhvc3QsIGtleXMsIHBhcmFtcykge1xuICB2YXIgcGFyYW1zQ29weSA9IGNsb25lKHBhcmFtcyk7XG4gIHZhciBzaWduYXR1cmVEYXRhID0gbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyAnOycgKyBob3N0LnRvTG93ZXJDYXNlKCkgK1xuICAgICc7JyArIHBhdGggKyAnOycgKyBidWlsZFNvcnRlZFF1ZXJ5KHBhcmFtc0NvcHkpO1xuICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnU2lnbmF0dXJlIGRhdGE6ICcgKyBzaWduYXR1cmVEYXRhKTtcbiAgdmFyIGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2Jywga2V5cy5zZWNyZXRLZXkudG9VcHBlckNhc2UoKSk7XG4gIGhtYWMudXBkYXRlKHNpZ25hdHVyZURhdGEpO1xuICByZXR1cm4gaG1hYy5kaWdlc3QoJ2Jhc2U2NCcpO1xufVxuXG5mdW5jdGlvbiBidWlsZFNvcnRlZFF1ZXJ5IChwYXJhbXMpIHtcbiAgLy8gU29ydGVkIGtleXNcbiAgdmFyIF9rZXlzID0ga2V5cyhwYXJhbXMpLnNvcnQoKTtcbiAgdmFyIHF1ZXJ5ID0gJyc7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gX2tleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgcXVlcnkgKz0gZW5jb2RlVVJJQ29tcG9uZW50KF9rZXlzW2ldKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbXNbX2tleXNbaV1dKSArICcmJztcbiAgfVxuICBxdWVyeSA9IHF1ZXJ5XG4gICAgLnJlcGxhY2UoL1xcKi9nLCAnJTJBJylcbiAgICAucmVwbGFjZSgvWyEnKCldL2csIGVzY2FwZSlcbiAgICAucmVwbGFjZSgvJTdFL2csICd+JylcbiAgICAucmVwbGFjZSgvXFwrL2csICclMjAnKTtcbiAgLy8gU3RyaXAgdGhlIGxhc3Qgc2VwYXJhdG9yIGFuZCByZXR1cm5cbiAgcmV0dXJuIHF1ZXJ5LnN1YnN0cmluZygwLCBxdWVyeS5sZW5ndGggLSAxKTtcbn1cbiJdfQ==
