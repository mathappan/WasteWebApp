'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

require('babel-polyfill');

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _lodash = require('lodash.defaults');

var _lodash2 = _interopRequireDefault(_lodash);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _config2 = require('./config');

var _config3 = _interopRequireDefault(_config2);

var _generateSignedParams = require('./generate-signed-params');

var _generateSignedParams2 = _interopRequireDefault(_generateSignedParams);

var _client = require('./client');

var _client2 = _interopRequireDefault(_client);

var _mutations = require('./mutations');

var _queries = require('./queries');

var _zip3 = require('./zip');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var debug = !!process.env.DEBUG;

exports.default = {
  Client: _client2.default,
  config: _config3.default,
  generateSignedParams: _generateSignedParams2.default,
  // This method is a shortcut method that accepts an object with everything needed
  // for the entire process of requesting an application protection and downloading
  // that same protection when the same ends.
  //
  // `configPathOrObject` can be a path to a JSON or directly an object containing
  // the following structure:
  //
  // ```json
  // {
  //   "keys": {
  //     "accessKey": "",
  //     "secretKey": ""
  //   },
  //   "applicationId": "",
  //   "filesDest": ""
  // }
  // ```
  //
  // Also the following optional parameters are accepted:
  //
  // ```json
  // {
  //   "filesSrc": [""],
  //   "params": {},
  //   "cwd": "",
  //   "host": "api.jscrambler.com",
  //   "port": "443"
  // }
  // ```
  //
  // `filesSrc` supports glob patterns, and if it's provided it will replace the
  // entire application sources.
  //
  // `params` if provided will replace all the application transformation parameters.
  //
  // `cwd` allows you to set the current working directory to resolve problems with
  // relative paths with your `filesSrc` is outside the current working directory.
  //
  // Finally, `host` and `port` can be overridden if you to engage with a different
  // endpoint than the default one, useful if you're running an enterprise version of
  // Jscrambler or if you're provided access to beta features of our product.
  //
  protectAndDownload: function protectAndDownload(configPathOrObject, destCallback) {
    var _this = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _config, finalConfig, applicationId, host, port, protocol, cafile, keys, sources, _finalConfig$stream, stream, cwd, params, applicationTypes, languageSpecifications, sourceMaps, randomizationSeed, areSubscribersOrdered, useRecommendedOrder, bail, jscramblerVersion, accessKey, secretKey, client, filesSrc, filesDest, content, removeSourceRes, hadNoSources, _filesSrc, i, l, _zip, addApplicationSourceRes, _zip2, _addApplicationSourceRes, $set, updateApplicationRes, createApplicationProtectionRes, protectionId, protection, errors, download;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _config = typeof configPathOrObject === 'string' ? require(configPathOrObject) : configPathOrObject;
              finalConfig = (0, _lodash2.default)(_config, _config3.default);
              applicationId = finalConfig.applicationId, host = finalConfig.host, port = finalConfig.port, protocol = finalConfig.protocol, cafile = finalConfig.cafile, keys = finalConfig.keys, sources = finalConfig.sources, _finalConfig$stream = finalConfig.stream, stream = _finalConfig$stream === undefined ? true : _finalConfig$stream, cwd = finalConfig.cwd, params = finalConfig.params, applicationTypes = finalConfig.applicationTypes, languageSpecifications = finalConfig.languageSpecifications, sourceMaps = finalConfig.sourceMaps, randomizationSeed = finalConfig.randomizationSeed, areSubscribersOrdered = finalConfig.areSubscribersOrdered, useRecommendedOrder = finalConfig.useRecommendedOrder, bail = finalConfig.bail, jscramblerVersion = finalConfig.jscramblerVersion;
              accessKey = keys.accessKey, secretKey = keys.secretKey;
              client = new _this.Client({
                accessKey: accessKey,
                secretKey: secretKey,
                host: host,
                port: port,
                protocol: protocol,
                cafile: cafile,
                jscramblerVersion: jscramblerVersion
              });
              filesSrc = finalConfig.filesSrc;
              filesDest = finalConfig.filesDest;


              if (sources) {
                filesSrc = undefined;
              }

              if (destCallback) {
                filesDest = undefined;
              }

              if (applicationId) {
                _context.next = 11;
                break;
              }

              throw new Error('Required *applicationId* not provided');

            case 11:
              if (!(!filesDest && !destCallback)) {
                _context.next = 13;
                break;
              }

              throw new Error('Required *filesDest* not provided');

            case 13:
              content = void 0;

              if (!(sources || filesSrc && filesSrc.length)) {
                _context.next = 23;
                break;
              }

              _context.next = 17;
              return _this.removeSourceFromApplication(client, '', applicationId);

            case 17:
              removeSourceRes = _context.sent;

              if (!removeSourceRes.errors) {
                _context.next = 23;
                break;
              }

              // TODO Implement error codes or fix this is on the services
              hadNoSources = false;

              removeSourceRes.errors.forEach(function (error) {
                if (error.message === 'Application Source with the given ID does not exist') {
                  hadNoSources = true;
                }
              });

              if (hadNoSources) {
                _context.next = 23;
                break;
              }

              throw new Error(removeSourceRes.errors[0].message);

            case 23:
              if (!(filesSrc && filesSrc.length)) {
                _context.next = 40;
                break;
              }

              _filesSrc = [];

              for (i = 0, l = filesSrc.length; i < l; ++i) {
                if (typeof filesSrc[i] === 'string') {
                  // TODO Replace `glob.sync` with async version
                  _filesSrc = _filesSrc.concat(_glob2.default.sync(filesSrc[i], {
                    dot: true
                  }));
                } else {
                  _filesSrc.push(filesSrc[i]);
                }
              }

              debug && console.log('Creating zip from source files');
              _context.next = 29;
              return (0, _zip3.zip)(_filesSrc, cwd);

            case 29:
              _zip = _context.sent;


              content = _zip.generate({
                type: 'nodebuffer'
              });
              content = content.toString('base64');

              debug && console.log('Adding sources to application');
              _context.next = 35;
              return _this.addApplicationSource(client, applicationId, {
                content: content,
                filename: 'application.zip',
                extension: 'zip'
              });

            case 35:
              addApplicationSourceRes = _context.sent;

              debug && console.log('Finished adding sources to application');
              errorHandler(addApplicationSourceRes);
              _context.next = 53;
              break;

            case 40:
              if (!sources) {
                _context.next = 53;
                break;
              }

              debug && console.log('Creating zip from sources');
              _context.next = 44;
              return (0, _zip3.zipSources)(sources);

            case 44:
              _zip2 = _context.sent;


              content = _zip2.generate({
                type: 'nodebuffer'
              });
              content = content.toString('base64');

              debug && console.log('Adding sources to application');
              _context.next = 50;
              return _this.addApplicationSource(client, applicationId, {
                content: content,
                filename: 'application.zip',
                extension: 'zip'
              });

            case 50:
              _addApplicationSourceRes = _context.sent;


              debug && console.log('Finished adding sources to application');
              errorHandler(_addApplicationSourceRes);

            case 53:
              $set = {
                _id: applicationId
              };


              if (params && Object.keys(params).length) {
                $set.parameters = JSON.stringify(normalizeParameters(params));
                $set.areSubscribersOrdered = Array.isArray(params);
              }

              if (typeof areSubscribersOrdered !== 'undefined') {
                $set.areSubscribersOrdered = areSubscribersOrdered;
              }

              if (applicationTypes) {
                $set.applicationTypes = applicationTypes;
              }

              if (typeof useRecommendedOrder !== 'undefined') {
                $set.useRecommendedOrder = useRecommendedOrder;
              }

              if (languageSpecifications) {
                $set.languageSpecifications = languageSpecifications;
              }

              if ((typeof sourceMaps === 'undefined' ? 'undefined' : _typeof(sourceMaps)) !== undefined) {
                $set.sourceMaps = JSON.stringify(sourceMaps);
              }

              if (!($set.parameters || $set.applicationTypes || $set.languageSpecifications || typeof $set.areSubscribersOrdered !== 'undefined')) {
                _context.next = 67;
                break;
              }

              debug && console.log('Updating parameters of protection');
              _context.next = 64;
              return _this.updateApplication(client, $set);

            case 64:
              updateApplicationRes = _context.sent;

              debug && console.log('Finished updating parameters of protection');
              errorHandler(updateApplicationRes);

            case 67:

              debug && console.log('Creating Application Protection');
              _context.next = 70;
              return _this.createApplicationProtection(client, applicationId, undefined, bail, randomizationSeed);

            case 70:
              createApplicationProtectionRes = _context.sent;

              errorHandler(createApplicationProtectionRes);

              protectionId = createApplicationProtectionRes.data.createApplicationProtection._id;
              _context.next = 75;
              return _this.pollProtection(client, applicationId, protectionId);

            case 75:
              protection = _context.sent;

              debug && console.log('Finished protecting');

              errors = [];

              protection.sources.forEach(function (s) {
                if (s.errorMessages && s.errorMessages.length > 0) {
                  errors.push.apply(errors, _toConsumableArray(s.errorMessages.map(function (e) {
                    return _extends({
                      filename: s.filename
                    }, e);
                  })));
                }
              });

              if (!(!bail && errors.length > 0)) {
                _context.next = 83;
                break;
              }

              errors.forEach(function (e) {
                return console.error('Non-fatal error: "' + e.message + '" in ' + e.filename);
              });
              _context.next = 86;
              break;

            case 83:
              if (!(bail && protection.state === 'errored')) {
                _context.next = 86;
                break;
              }

              errors.forEach(function (e) {
                return console.error('Error: "' + e.message + '" in ' + e.filename + (e.line ? ':' + e.line : ''));
              });
              throw new Error('Protection failed');

            case 86:

              if (protection.deprecations) {
                protection.deprecations.forEach(function (deprecation) {
                  deprecation && console.warn('Warning: Option ' + deprecation + ' is deprecated');
                });
              }

              debug && console.log('Downloading protection result');
              _context.next = 90;
              return _this.downloadApplicationProtection(client, protectionId);

            case 90:
              download = _context.sent;

              errorHandler(download);
              debug && console.log('Unzipping files');
              (0, _zip3.unzip)(download, filesDest || destCallback, stream);
              debug && console.log('Finished unzipping files');
              console.log(protectionId);

            case 96:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }))();
  },
  downloadSourceMaps: function downloadSourceMaps(configs, destCallback) {
    var _this2 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var keys, host, port, protocol, cafile, _configs$stream, stream, filesDest, filesSrc, protectionId, accessKey, secretKey, client, download;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              keys = configs.keys, host = configs.host, port = configs.port, protocol = configs.protocol, cafile = configs.cafile, _configs$stream = configs.stream, stream = _configs$stream === undefined ? true : _configs$stream, filesDest = configs.filesDest, filesSrc = configs.filesSrc, protectionId = configs.protectionId;
              accessKey = keys.accessKey, secretKey = keys.secretKey;
              client = new _this2.Client({
                accessKey: accessKey,
                secretKey: secretKey,
                host: host,
                port: port,
                protocol: protocol,
                cafile: cafile
              });

              if (!(!filesDest && !destCallback)) {
                _context2.next = 5;
                break;
              }

              throw new Error('Required *filesDest* not provided');

            case 5:
              if (protectionId) {
                _context2.next = 7;
                break;
              }

              throw new Error('Required *protectionId* not provided');

            case 7:

              if (filesSrc) {
                console.log('[Warning] Ignoring sources supplied. Downloading source maps of given protection');
              }
              download = void 0;
              _context2.prev = 9;
              _context2.next = 12;
              return _this2.downloadSourceMapsRequest(client, protectionId);

            case 12:
              download = _context2.sent;
              _context2.next = 18;
              break;

            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2['catch'](9);

              errorHandler(_context2.t0);

            case 18:
              (0, _zip3.unzip)(download, filesDest || destCallback, stream);

            case 19:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this2, [[9, 15]]);
    }))();
  },
  pollProtection: function pollProtection(client, applicationId, protectionId) {
    var _this3 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
      var deferred, poll;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              deferred = _q2.default.defer();

              poll = function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                  var applicationProtection, state, bail, url;
                  return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          _context3.next = 2;
                          return _this3.getApplicationProtection(client, applicationId, protectionId);

                        case 2:
                          applicationProtection = _context3.sent;

                          if (!applicationProtection.errors) {
                            _context3.next = 8;
                            break;
                          }

                          console.log('Error polling protection', applicationProtection.errors);
                          throw new Error('Error polling protection');

                        case 8:
                          state = applicationProtection.data.applicationProtection.state;
                          bail = applicationProtection.data.applicationProtection.bail;

                          if (state !== 'finished' && state !== 'errored' && state !== 'canceled') {
                            setTimeout(poll, 500);
                          } else if (state === 'errored' && !bail) {
                            url = 'https://app.jscrambler.com/app/' + applicationId + '/protections/' + protectionId;

                            deferred.reject('Protection failed. For more information visit: ' + url);
                          } else if (state === 'canceled') {
                            deferred.reject('Protection canceled by user');
                          } else {
                            deferred.resolve(applicationProtection.data.applicationProtection);
                          }

                        case 11:
                        case 'end':
                          return _context3.stop();
                      }
                    }
                  }, _callee3, _this3);
                }));

                return function poll() {
                  return _ref.apply(this, arguments);
                };
              }();

              poll();

              return _context4.abrupt('return', deferred.promise);

            case 4:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee4, _this3);
    }))();
  },

  //
  createApplication: function createApplication(client, data, fragments) {
    var _this4 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.createApplication)(data, fragments), responseHandler(deferred));
              return _context5.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, _this4);
    }))();
  },

  //
  duplicateApplication: function duplicateApplication(client, data, fragments) {
    var _this5 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.duplicateApplication)(data, fragments), responseHandler(deferred));
              return _context6.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, _this5);
    }))();
  },

  //
  removeApplication: function removeApplication(client, id) {
    var _this6 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.removeApplication)(id), responseHandler(deferred));
              return _context7.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context7.stop();
          }
        }
      }, _callee7, _this6);
    }))();
  },

  //
  removeProtection: function removeProtection(client, id, appId, fragments) {
    var _this7 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.removeProtection)(id, appId, fragments), responseHandler(deferred));
              return _context8.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context8.stop();
          }
        }
      }, _callee8, _this7);
    }))();
  },

  //
  cancelProtection: function cancelProtection(client, id, appId, fragments) {
    var _this8 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.cancelProtection)(id, appId, fragments), responseHandler(deferred));
              return _context9.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context9.stop();
          }
        }
      }, _callee9, _this8);
    }))();
  },

  //
  updateApplication: function updateApplication(client, application, fragments) {
    var _this9 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.updateApplication)(application, fragments), responseHandler(deferred));
              return _context10.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context10.stop();
          }
        }
      }, _callee10, _this9);
    }))();
  },

  //
  unlockApplication: function unlockApplication(client, application, fragments) {
    var _this10 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.unlockApplication)(application, fragments), responseHandler(deferred));
              return _context11.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context11.stop();
          }
        }
      }, _callee11, _this10);
    }))();
  },

  //
  getApplication: function getApplication(client, applicationId, fragments) {
    var _this11 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application', (0, _queries.getApplication)(applicationId, fragments), responseHandler(deferred));
              return _context12.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context12.stop();
          }
        }
      }, _callee12, _this11);
    }))();
  },

  //
  getApplicationSource: function getApplicationSource(client, sourceId, fragments, limits) {
    var _this12 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee13$(_context13) {
        while (1) {
          switch (_context13.prev = _context13.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application', (0, _queries.getApplicationSource)(sourceId, fragments, limits), responseHandler(deferred));
              return _context13.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context13.stop();
          }
        }
      }, _callee13, _this12);
    }))();
  },

  //
  getApplicationProtections: function getApplicationProtections(client, applicationId, params, fragments) {
    var _this13 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application', (0, _queries.getApplicationProtections)(applicationId, params, fragments), responseHandler(deferred));
              return _context14.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context14.stop();
          }
        }
      }, _callee14, _this13);
    }))();
  },

  //
  getApplicationProtectionsCount: function getApplicationProtectionsCount(client, applicationId, fragments) {
    var _this14 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application', (0, _queries.getApplicationProtectionsCount)(applicationId, fragments), responseHandler(deferred));
              return _context15.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context15.stop();
          }
        }
      }, _callee15, _this14);
    }))();
  },

  //
  createTemplate: function createTemplate(client, template, fragments) {
    var _this15 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee16$(_context16) {
        while (1) {
          switch (_context16.prev = _context16.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.createTemplate)(template, fragments), responseHandler(deferred));
              return _context16.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context16.stop();
          }
        }
      }, _callee16, _this15);
    }))();
  },

  //
  removeTemplate: function removeTemplate(client, id) {
    var _this16 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.removeTemplate)(id), responseHandler(deferred));
              return _context17.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context17.stop();
          }
        }
      }, _callee17, _this16);
    }))();
  },

  //
  getTemplates: function getTemplates(client, fragments) {
    var _this17 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application', (0, _queries.getTemplates)(fragments), responseHandler(deferred));
              return _context18.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context18.stop();
          }
        }
      }, _callee18, _this17);
    }))();
  },

  //
  getApplications: function getApplications(client, fragments) {
    var _this18 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application', (0, _queries.getApplications)(fragments), responseHandler(deferred));
              return _context19.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context19.stop();
          }
        }
      }, _callee19, _this18);
    }))();
  },

  //
  addApplicationSource: function addApplicationSource(client, applicationId, applicationSource, fragments) {
    var _this19 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.addApplicationSource)(applicationId, applicationSource, fragments), responseHandler(deferred));
              return _context20.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context20.stop();
          }
        }
      }, _callee20, _this19);
    }))();
  },

  //
  addApplicationSourceFromURL: function addApplicationSourceFromURL(client, applicationId, url, fragments) {
    var _this20 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              deferred = _q2.default.defer();
              return _context21.abrupt('return', getFileFromUrl(client, url).then(function (file) {
                client.post('/application', (0, _mutations.addApplicationSource)(applicationId, file, fragments), responseHandler(deferred));
                return deferred.promise;
              }));

            case 2:
            case 'end':
              return _context21.stop();
          }
        }
      }, _callee21, _this20);
    }))();
  },

  //
  updateApplicationSource: function updateApplicationSource(client, applicationSource, fragments) {
    var _this21 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.updateApplicationSource)(applicationSource, fragments), responseHandler(deferred));
              return _context22.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context22.stop();
          }
        }
      }, _callee22, _this21);
    }))();
  },

  //
  removeSourceFromApplication: function removeSourceFromApplication(client, sourceId, applicationId, fragments) {
    var _this22 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.removeSourceFromApplication)(sourceId, applicationId, fragments), responseHandler(deferred));
              return _context23.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context23.stop();
          }
        }
      }, _callee23, _this22);
    }))();
  },

  //
  applyTemplate: function applyTemplate(client, templateId, appId, fragments) {
    var _this23 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.applyTemplate)(templateId, appId, fragments), responseHandler(deferred));
              return _context24.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context24.stop();
          }
        }
      }, _callee24, _this23);
    }))();
  },

  //
  updateTemplate: function updateTemplate(client, template, fragments) {
    var _this24 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.updateTemplate)(template, fragments), responseHandler(deferred));
              return _context25.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context25.stop();
          }
        }
      }, _callee25, _this24);
    }))();
  },

  //
  createApplicationProtection: function createApplicationProtection(client, applicationId, fragments, bail, randomizationSeed) {
    var _this25 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              deferred = _q2.default.defer();

              client.post('/application', (0, _mutations.createApplicationProtection)(applicationId, fragments, bail, randomizationSeed), responseHandler(deferred));
              return _context26.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context26.stop();
          }
        }
      }, _callee26, _this25);
    }))();
  },

  //
  getApplicationProtection: function getApplicationProtection(client, applicationId, protectionId, fragments) {
    var _this26 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application', (0, _queries.getProtection)(applicationId, protectionId, fragments), responseHandler(deferred));
              return _context27.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context27.stop();
          }
        }
      }, _callee27, _this26);
    }))();
  },

  //
  downloadSourceMapsRequest: function downloadSourceMapsRequest(client, protectionId) {
    var _this27 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application/sourceMaps/' + protectionId, null, responseHandler(deferred), false);
              return _context28.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context28.stop();
          }
        }
      }, _callee28, _this27);
    }))();
  },

  //
  downloadApplicationProtection: function downloadApplicationProtection(client, protectionId) {
    var _this28 = this;

    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29() {
      var deferred;
      return regeneratorRuntime.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              deferred = _q2.default.defer();

              client.get('/application/download/' + protectionId, null, responseHandler(deferred), false);
              return _context29.abrupt('return', deferred.promise);

            case 3:
            case 'end':
              return _context29.stop();
          }
        }
      }, _callee29, _this28);
    }))();
  }
};


function getFileFromUrl(client, url) {
  var deferred = _q2.default.defer();
  var file;
  _axios2.default.get(url).then(function (res) {
    file = {
      content: res.data,
      filename: _path2.default.basename(url),
      extension: _path2.default.extname(url).substr(1)
    };
    deferred.resolve(file);
  }).catch(function (err) {
    deferred.reject(err);
  });
  return deferred.promise;
}

function responseHandler(deferred) {
  return function (err, res) {
    if (err) {
      deferred.reject(err);
    } else {
      var body = res.data;
      try {
        if (res.status >= 400) {
          deferred.reject(body);
        } else {
          deferred.resolve(body);
        }
      } catch (ex) {
        deferred.reject(body);
      }
    }
  };
}

function errorHandler(res) {
  if (res.errors && res.errors.length) {
    res.errors.forEach(function (error) {
      throw new Error(error.message);
    });
  }

  if (res.message) {
    throw new Error(res.message);
  }

  return res;
}

function normalizeParameters(parameters) {
  var result;

  if (!Array.isArray(parameters)) {
    result = [];
    Object.keys(parameters).forEach(function (name) {
      result.push({
        name: name,
        options: parameters[name]
      });
    });
  } else {
    result = parameters;
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvaW5kZXguanMiXSwibmFtZXMiOlsiZGVidWciLCJwcm9jZXNzIiwiZW52IiwiREVCVUciLCJDbGllbnQiLCJjb25maWciLCJnZW5lcmF0ZVNpZ25lZFBhcmFtcyIsInByb3RlY3RBbmREb3dubG9hZCIsImNvbmZpZ1BhdGhPck9iamVjdCIsImRlc3RDYWxsYmFjayIsIl9jb25maWciLCJyZXF1aXJlIiwiZmluYWxDb25maWciLCJhcHBsaWNhdGlvbklkIiwiaG9zdCIsInBvcnQiLCJwcm90b2NvbCIsImNhZmlsZSIsImtleXMiLCJzb3VyY2VzIiwic3RyZWFtIiwiY3dkIiwicGFyYW1zIiwiYXBwbGljYXRpb25UeXBlcyIsImxhbmd1YWdlU3BlY2lmaWNhdGlvbnMiLCJzb3VyY2VNYXBzIiwicmFuZG9taXphdGlvblNlZWQiLCJhcmVTdWJzY3JpYmVyc09yZGVyZWQiLCJ1c2VSZWNvbW1lbmRlZE9yZGVyIiwiYmFpbCIsImpzY3JhbWJsZXJWZXJzaW9uIiwiYWNjZXNzS2V5Iiwic2VjcmV0S2V5IiwiY2xpZW50IiwiZmlsZXNTcmMiLCJmaWxlc0Rlc3QiLCJ1bmRlZmluZWQiLCJFcnJvciIsImNvbnRlbnQiLCJsZW5ndGgiLCJyZW1vdmVTb3VyY2VGcm9tQXBwbGljYXRpb24iLCJyZW1vdmVTb3VyY2VSZXMiLCJlcnJvcnMiLCJoYWROb1NvdXJjZXMiLCJmb3JFYWNoIiwiZXJyb3IiLCJtZXNzYWdlIiwiX2ZpbGVzU3JjIiwiaSIsImwiLCJjb25jYXQiLCJzeW5jIiwiZG90IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJfemlwIiwiZ2VuZXJhdGUiLCJ0eXBlIiwidG9TdHJpbmciLCJhZGRBcHBsaWNhdGlvblNvdXJjZSIsImZpbGVuYW1lIiwiZXh0ZW5zaW9uIiwiYWRkQXBwbGljYXRpb25Tb3VyY2VSZXMiLCJlcnJvckhhbmRsZXIiLCIkc2V0IiwiX2lkIiwiT2JqZWN0IiwicGFyYW1ldGVycyIsIkpTT04iLCJzdHJpbmdpZnkiLCJub3JtYWxpemVQYXJhbWV0ZXJzIiwiQXJyYXkiLCJpc0FycmF5IiwidXBkYXRlQXBwbGljYXRpb24iLCJ1cGRhdGVBcHBsaWNhdGlvblJlcyIsImNyZWF0ZUFwcGxpY2F0aW9uUHJvdGVjdGlvbiIsImNyZWF0ZUFwcGxpY2F0aW9uUHJvdGVjdGlvblJlcyIsInByb3RlY3Rpb25JZCIsImRhdGEiLCJwb2xsUHJvdGVjdGlvbiIsInByb3RlY3Rpb24iLCJzIiwiZXJyb3JNZXNzYWdlcyIsIm1hcCIsImUiLCJzdGF0ZSIsImxpbmUiLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGlvbiIsIndhcm4iLCJkb3dubG9hZEFwcGxpY2F0aW9uUHJvdGVjdGlvbiIsImRvd25sb2FkIiwiZG93bmxvYWRTb3VyY2VNYXBzIiwiY29uZmlncyIsImRvd25sb2FkU291cmNlTWFwc1JlcXVlc3QiLCJkZWZlcnJlZCIsImRlZmVyIiwicG9sbCIsImdldEFwcGxpY2F0aW9uUHJvdGVjdGlvbiIsImFwcGxpY2F0aW9uUHJvdGVjdGlvbiIsInNldFRpbWVvdXQiLCJ1cmwiLCJyZWplY3QiLCJyZXNvbHZlIiwicHJvbWlzZSIsImNyZWF0ZUFwcGxpY2F0aW9uIiwiZnJhZ21lbnRzIiwicG9zdCIsInJlc3BvbnNlSGFuZGxlciIsImR1cGxpY2F0ZUFwcGxpY2F0aW9uIiwicmVtb3ZlQXBwbGljYXRpb24iLCJpZCIsInJlbW92ZVByb3RlY3Rpb24iLCJhcHBJZCIsImNhbmNlbFByb3RlY3Rpb24iLCJhcHBsaWNhdGlvbiIsInVubG9ja0FwcGxpY2F0aW9uIiwiZ2V0QXBwbGljYXRpb24iLCJnZXQiLCJnZXRBcHBsaWNhdGlvblNvdXJjZSIsInNvdXJjZUlkIiwibGltaXRzIiwiZ2V0QXBwbGljYXRpb25Qcm90ZWN0aW9ucyIsImdldEFwcGxpY2F0aW9uUHJvdGVjdGlvbnNDb3VudCIsImNyZWF0ZVRlbXBsYXRlIiwidGVtcGxhdGUiLCJyZW1vdmVUZW1wbGF0ZSIsImdldFRlbXBsYXRlcyIsImdldEFwcGxpY2F0aW9ucyIsImFwcGxpY2F0aW9uU291cmNlIiwiYWRkQXBwbGljYXRpb25Tb3VyY2VGcm9tVVJMIiwiZ2V0RmlsZUZyb21VcmwiLCJ0aGVuIiwiZmlsZSIsInVwZGF0ZUFwcGxpY2F0aW9uU291cmNlIiwiYXBwbHlUZW1wbGF0ZSIsInRlbXBsYXRlSWQiLCJ1cGRhdGVUZW1wbGF0ZSIsInJlcyIsImJhc2VuYW1lIiwiZXh0bmFtZSIsInN1YnN0ciIsImNhdGNoIiwiZXJyIiwiYm9keSIsInN0YXR1cyIsImV4IiwicmVzdWx0IiwibmFtZSIsIm9wdGlvbnMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBaUJBOztBQVNBOzs7Ozs7OztBQU1BLElBQU1BLFFBQVEsQ0FBQyxDQUFDQyxRQUFRQyxHQUFSLENBQVlDLEtBQTVCOztrQkFFZTtBQUNiQywwQkFEYTtBQUViQywwQkFGYTtBQUdiQyxzREFIYTtBQUliO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNNQyxvQkE5Q08sOEJBOENhQyxrQkE5Q2IsRUE4Q2lDQyxZQTlDakMsRUE4QytDO0FBQUE7O0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNwREMscUJBRG9ELEdBQzFDLE9BQU9GLGtCQUFQLEtBQThCLFFBQTlCLEdBQ2RHLFFBQVFILGtCQUFSLENBRGMsR0FDZ0JBLGtCQUYwQjtBQUlwREkseUJBSm9ELEdBSXRDLHNCQUFTRixPQUFULG1CQUpzQztBQU94REcsMkJBUHdELEdBeUJ0REQsV0F6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QUNWZ0csa0JBRFU7QUFFVkMsaUJBQVNsRixXQUFXaUYsSUFBWDtBQUZDLE9BQVo7QUFJRCxLQUxEO0FBTUQsR0FSRCxNQVFPO0FBQ0xELGFBQVNoRixVQUFUO0FBQ0Q7O0FBRUQsU0FBT2dGLE1BQVA7QUFDRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xuXG5pbXBvcnQgZ2xvYiBmcm9tICdnbG9iJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJ2xvZGFzaC5kZWZhdWx0cyc7XG5pbXBvcnQgUSBmcm9tICdxJztcblxuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgZ2VuZXJhdGVTaWduZWRQYXJhbXMgZnJvbSAnLi9nZW5lcmF0ZS1zaWduZWQtcGFyYW1zJztcbmltcG9ydCBKU2NyYW1ibGVyQ2xpZW50IGZyb20gJy4vY2xpZW50JztcbmltcG9ydCB7XG4gIGFkZEFwcGxpY2F0aW9uU291cmNlLFxuICBjcmVhdGVBcHBsaWNhdGlvbixcbiAgcmVtb3ZlQXBwbGljYXRpb24sXG4gIHVwZGF0ZUFwcGxpY2F0aW9uLFxuICB1cGRhdGVBcHBsaWNhdGlvblNvdXJjZSxcbiAgcmVtb3ZlU291cmNlRnJvbUFwcGxpY2F0aW9uLFxuICBjcmVhdGVUZW1wbGF0ZSxcbiAgcmVtb3ZlVGVtcGxhdGUsXG4gIHVwZGF0ZVRlbXBsYXRlLFxuICBjcmVhdGVBcHBsaWNhdGlvblByb3RlY3Rpb24sXG4gIHJlbW92ZVByb3RlY3Rpb24sXG4gIGNhbmNlbFByb3RlY3Rpb24sXG4gIGR1cGxpY2F0ZUFwcGxpY2F0aW9uLFxuICB1bmxvY2tBcHBsaWNhdGlvbixcbiAgYXBwbHlUZW1wbGF0ZVxufSBmcm9tICcuL211dGF0aW9ucyc7XG5pbXBvcnQge1xuICBnZXRBcHBsaWNhdGlvbixcbiAgZ2V0QXBwbGljYXRpb25Qcm90ZWN0aW9ucyxcbiAgZ2V0QXBwbGljYXRpb25Qcm90ZWN0aW9uc0NvdW50LFxuICBnZXRBcHBsaWNhdGlvbnMsXG4gIGdldEFwcGxpY2F0aW9uU291cmNlLFxuICBnZXRUZW1wbGF0ZXMsXG4gIGdldFByb3RlY3Rpb25cbn0gZnJvbSAnLi9xdWVyaWVzJztcbmltcG9ydCB7XG4gIHppcCxcbiAgemlwU291cmNlcyxcbiAgdW56aXBcbn0gZnJvbSAnLi96aXAnO1xuXG5jb25zdCBkZWJ1ZyA9ICEhcHJvY2Vzcy5lbnYuREVCVUc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgQ2xpZW50OiBKU2NyYW1ibGVyQ2xpZW50LFxuICBjb25maWcsXG4gIGdlbmVyYXRlU2lnbmVkUGFyYW1zLFxuICAvLyBUaGlzIG1ldGhvZCBpcyBhIHNob3J0Y3V0IG1ldGhvZCB0aGF0IGFjY2VwdHMgYW4gb2JqZWN0IHdpdGggZXZlcnl0aGluZyBuZWVkZWRcbiAgLy8gZm9yIHRoZSBlbnRpcmUgcHJvY2VzcyBvZiByZXF1ZXN0aW5nIGFuIGFwcGxpY2F0aW9uIHByb3RlY3Rpb24gYW5kIGRvd25sb2FkaW5nXG4gIC8vIHRoYXQgc2FtZSBwcm90ZWN0aW9uIHdoZW4gdGhlIHNhbWUgZW5kcy5cbiAgLy9cbiAgLy8gYGNvbmZpZ1BhdGhPck9iamVjdGAgY2FuIGJlIGEgcGF0aCB0byBhIEpTT04gb3IgZGlyZWN0bHkgYW4gb2JqZWN0IGNvbnRhaW5pbmdcbiAgLy8gdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XG4gIC8vXG4gIC8vIGBgYGpzb25cbiAgLy8ge1xuICAvLyAgIFwia2V5c1wiOiB7XG4gIC8vICAgICBcImFjY2Vzc0tleVwiOiBcIlwiLFxuICAvLyAgICAgXCJzZWNyZXRLZXlcIjogXCJcIlxuICAvLyAgIH0sXG4gIC8vICAgXCJhcHBsaWNhdGlvbklkXCI6IFwiXCIsXG4gIC8vICAgXCJmaWxlc0Rlc3RcIjogXCJcIlxuICAvLyB9XG4gIC8vIGBgYFxuICAvL1xuICAvLyBBbHNvIHRoZSBmb2xsb3dpbmcgb3B0aW9uYWwgcGFyYW1ldGVycyBhcmUgYWNjZXB0ZWQ6XG4gIC8vXG4gIC8vIGBgYGpzb25cbiAgLy8ge1xuICAvLyAgIFwiZmlsZXNTcmNcIjogW1wiXCJdLFxuICAvLyAgIFwicGFyYW1zXCI6IHt9LFxuICAvLyAgIFwiY3dkXCI6IFwiXCIsXG4gIC8vICAgXCJob3N0XCI6IFwiYXBpLmpzY3JhbWJsZXIuY29tXCIsXG4gIC8vICAgXCJwb3J0XCI6IFwiNDQzXCJcbiAgLy8gfVxuICAvLyBgYGBcbiAgLy9cbiAgLy8gYGZpbGVzU3JjYCBzdXBwb3J0cyBnbG9iIHBhdHRlcm5zLCBhbmQgaWYgaXQncyBwcm92aWRlZCBpdCB3aWxsIHJlcGxhY2UgdGhlXG4gIC8vIGVudGlyZSBhcHBsaWNhdGlvbiBzb3VyY2VzLlxuICAvL1xuICAvLyBgcGFyYW1zYCBpZiBwcm92aWRlZCB3aWxsIHJlcGxhY2UgYWxsIHRoZSBhcHBsaWNhdGlvbiB0cmFuc2Zvcm1hdGlvbiBwYXJhbWV0ZXJzLlxuICAvL1xuICAvLyBgY3dkYCBhbGxvd3MgeW91IHRvIHNldCB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeSB0byByZXNvbHZlIHByb2JsZW1zIHdpdGhcbiAgLy8gcmVsYXRpdmUgcGF0aHMgd2l0aCB5b3VyIGBmaWxlc1NyY2AgaXMgb3V0c2lkZSB0aGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS5cbiAgLy9cbiAgLy8gRmluYWxseSwgYGhvc3RgIGFuZCBgcG9ydGAgY2FuIGJlIG92ZXJyaWRkZW4gaWYgeW91IHRvIGVuZ2FnZSB3aXRoIGEgZGlmZmVyZW50XG4gIC8vIGVuZHBvaW50IHRoYW4gdGhlIGRlZmF1bHQgb25lLCB1c2VmdWwgaWYgeW91J3JlIHJ1bm5pbmcgYW4gZW50ZXJwcmlzZSB2ZXJzaW9uIG9mXG4gIC8vIEpzY3JhbWJsZXIgb3IgaWYgeW91J3JlIHByb3ZpZGVkIGFjY2VzcyB0byBiZXRhIGZlYXR1cmVzIG9mIG91ciBwcm9kdWN0LlxuICAvL1xuICBhc3luYyBwcm90ZWN0QW5kRG93bmxvYWQgKGNvbmZpZ1BhdGhPck9iamVjdCwgZGVzdENhbGxiYWNrKSB7XG4gICAgY29uc3QgX2NvbmZpZyA9IHR5cGVvZiBjb25maWdQYXRoT3JPYmplY3QgPT09ICdzdHJpbmcnID9cbiAgICAgIHJlcXVpcmUoY29uZmlnUGF0aE9yT2JqZWN0KSA6IGNvbmZpZ1BhdGhPck9iamVjdDtcblxuICAgIGNvbnN0IGZpbmFsQ29uZmlnID0gZGVmYXVsdHMoX2NvbmZpZywgY29uZmlnKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGFwcGxpY2F0aW9uSWQsXG4gICAgICBob3N0LFxuICAgICAgcG9ydCxcbiAgICAgIHByb3RvY29sLFxuICAgICAgY2FmaWxlLFxuICAgICAga2V5cyxcbiAgICAgIHNvdXJjZXMsXG4gICAgICBzdHJlYW0gPSB0cnVlLFxuICAgICAgY3dkLFxuICAgICAgcGFyYW1zLFxuICAgICAgYXBwbGljYXRpb25UeXBlcyxcbiAgICAgIGxhbmd1YWdlU3BlY2lmaWNhdGlvbnMsXG4gICAgICBzb3VyY2VNYXBzLFxuICAgICAgcmFuZG9taXphdGlvblNlZWQsXG4gICAgICBhcmVTdWJzY3JpYmVyc09yZGVyZWQsXG4gICAgICB1c2VSZWNvbW1lbmRlZE9yZGVyLFxuICAgICAgYmFpbCxcbiAgICAgIGpzY3JhbWJsZXJWZXJzaW9uXG4gICAgfSA9IGZpbmFsQ29uZmlnO1xuXG4gICAgY29uc3Qge1xuICAgICAgYWNjZXNzS2V5LFxuICAgICAgc2VjcmV0S2V5XG4gICAgfSA9IGtleXM7XG5cbiAgICBjb25zdCBjbGllbnQgPSBuZXcgdGhpcy5DbGllbnQoe1xuICAgICAgYWNjZXNzS2V5LFxuICAgICAgc2VjcmV0S2V5LFxuICAgICAgaG9zdCxcbiAgICAgIHBvcnQsXG4gICAgICBwcm90b2NvbCxcbiAgICAgIGNhZmlsZSxcbiAgICAgIGpzY3JhbWJsZXJWZXJzaW9uXG4gICAgfSk7XG5cbiAgICBsZXQgZmlsZXNTcmMgPSBmaW5hbENvbmZpZy5maWxlc1NyYztcbiAgICBsZXQgZmlsZXNEZXN0ID0gZmluYWxDb25maWcuZmlsZXNEZXN0O1xuXG4gICAgaWYgKHNvdXJjZXMpIHtcbiAgICAgIGZpbGVzU3JjID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChkZXN0Q2FsbGJhY2spIHtcbiAgICAgIGZpbGVzRGVzdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoIWFwcGxpY2F0aW9uSWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgKmFwcGxpY2F0aW9uSWQqIG5vdCBwcm92aWRlZCcpO1xuICAgIH1cblxuICAgIGlmICghZmlsZXNEZXN0ICYmICFkZXN0Q2FsbGJhY2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVxdWlyZWQgKmZpbGVzRGVzdCogbm90IHByb3ZpZGVkJyk7XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnQ7XG5cbiAgICBpZiAoc291cmNlcyB8fCAoZmlsZXNTcmMgJiYgZmlsZXNTcmMubGVuZ3RoKSkge1xuICAgICAgY29uc3QgcmVtb3ZlU291cmNlUmVzID0gYXdhaXQgdGhpcy5yZW1vdmVTb3VyY2VGcm9tQXBwbGljYXRpb24oY2xpZW50LCAnJywgYXBwbGljYXRpb25JZCk7XG4gICAgICBpZiAocmVtb3ZlU291cmNlUmVzLmVycm9ycykge1xuICAgICAgICAvLyBUT0RPIEltcGxlbWVudCBlcnJvciBjb2RlcyBvciBmaXggdGhpcyBpcyBvbiB0aGUgc2VydmljZXNcbiAgICAgICAgbGV0IGhhZE5vU291cmNlcyA9IGZhbHNlO1xuICAgICAgICByZW1vdmVTb3VyY2VSZXMuZXJyb3JzLmZvckVhY2goZXJyb3IgPT4ge1xuICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlID09PSAnQXBwbGljYXRpb24gU291cmNlIHdpdGggdGhlIGdpdmVuIElEIGRvZXMgbm90IGV4aXN0Jykge1xuICAgICAgICAgICAgaGFkTm9Tb3VyY2VzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWhhZE5vU291cmNlcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZW1vdmVTb3VyY2VSZXMuZXJyb3JzWzBdLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZpbGVzU3JjICYmIGZpbGVzU3JjLmxlbmd0aCkge1xuICAgICAgbGV0IF9maWxlc1NyYyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBmaWxlc1NyYy5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWxlc1NyY1tpXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBUT0RPIFJlcGxhY2UgYGdsb2Iuc3luY2Agd2l0aCBhc3luYyB2ZXJzaW9uXG4gICAgICAgICAgX2ZpbGVzU3JjID0gX2ZpbGVzU3JjLmNvbmNhdChnbG9iLnN5bmMoZmlsZXNTcmNbaV0sIHtcbiAgICAgICAgICAgIGRvdDogdHJ1ZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfZmlsZXNTcmMucHVzaChmaWxlc1NyY1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZGVidWcgJiYgY29uc29sZS5sb2coJ0NyZWF0aW5nIHppcCBmcm9tIHNvdXJjZSBmaWxlcycpO1xuICAgICAgY29uc3QgX3ppcCA9IGF3YWl0IHppcChfZmlsZXNTcmMsIGN3ZCk7XG5cbiAgICAgIGNvbnRlbnQgPSBfemlwLmdlbmVyYXRlKHtcbiAgICAgICAgdHlwZTogJ25vZGVidWZmZXInXG4gICAgICB9KTtcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKCdiYXNlNjQnKTtcblxuICAgICAgZGVidWcgJiYgY29uc29sZS5sb2coJ0FkZGluZyBzb3VyY2VzIHRvIGFwcGxpY2F0aW9uJyk7XG4gICAgICBjb25zdCBhZGRBcHBsaWNhdGlvblNvdXJjZVJlcyA9IGF3YWl0IHRoaXMuYWRkQXBwbGljYXRpb25Tb3VyY2UoY2xpZW50LCBhcHBsaWNhdGlvbklkLCB7XG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGZpbGVuYW1lOiAnYXBwbGljYXRpb24uemlwJyxcbiAgICAgICAgZXh0ZW5zaW9uOiAnemlwJ1xuICAgICAgfSk7XG4gICAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnRmluaXNoZWQgYWRkaW5nIHNvdXJjZXMgdG8gYXBwbGljYXRpb24nKTtcbiAgICAgIGVycm9ySGFuZGxlcihhZGRBcHBsaWNhdGlvblNvdXJjZVJlcyk7XG4gICAgfSBlbHNlIGlmIChzb3VyY2VzKSB7XG4gICAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnQ3JlYXRpbmcgemlwIGZyb20gc291cmNlcycpO1xuICAgICAgY29uc3QgX3ppcCA9IGF3YWl0IHppcFNvdXJjZXMoc291cmNlcyk7XG5cbiAgICAgIGNvbnRlbnQgPSBfemlwLmdlbmVyYXRlKHtcbiAgICAgICAgdHlwZTogJ25vZGVidWZmZXInXG4gICAgICB9KTtcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnRvU3RyaW5nKCdiYXNlNjQnKTtcblxuICAgICAgZGVidWcgJiYgY29uc29sZS5sb2coJ0FkZGluZyBzb3VyY2VzIHRvIGFwcGxpY2F0aW9uJyk7XG4gICAgICBjb25zdCBhZGRBcHBsaWNhdGlvblNvdXJjZVJlcyA9IGF3YWl0IHRoaXMuYWRkQXBwbGljYXRpb25Tb3VyY2UoY2xpZW50LCBhcHBsaWNhdGlvbklkLCB7XG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGZpbGVuYW1lOiAnYXBwbGljYXRpb24uemlwJyxcbiAgICAgICAgZXh0ZW5zaW9uOiAnemlwJ1xuICAgICAgfSk7XG5cbiAgICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdGaW5pc2hlZCBhZGRpbmcgc291cmNlcyB0byBhcHBsaWNhdGlvbicpO1xuICAgICAgZXJyb3JIYW5kbGVyKGFkZEFwcGxpY2F0aW9uU291cmNlUmVzKTtcbiAgICB9XG5cbiAgICBjb25zdCAkc2V0ID0ge1xuICAgICAgX2lkOiBhcHBsaWNhdGlvbklkXG4gICAgfTtcblxuICAgIGlmIChwYXJhbXMgJiYgT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGgpIHtcbiAgICAgICRzZXQucGFyYW1ldGVycyA9IEpTT04uc3RyaW5naWZ5KG5vcm1hbGl6ZVBhcmFtZXRlcnMocGFyYW1zKSk7XG4gICAgICAkc2V0LmFyZVN1YnNjcmliZXJzT3JkZXJlZCA9IEFycmF5LmlzQXJyYXkocGFyYW1zKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFyZVN1YnNjcmliZXJzT3JkZXJlZCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICRzZXQuYXJlU3Vic2NyaWJlcnNPcmRlcmVkID0gYXJlU3Vic2NyaWJlcnNPcmRlcmVkO1xuICAgIH1cblxuICAgIGlmIChhcHBsaWNhdGlvblR5cGVzKSB7XG4gICAgICAkc2V0LmFwcGxpY2F0aW9uVHlwZXMgPSBhcHBsaWNhdGlvblR5cGVzO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdXNlUmVjb21tZW5kZWRPcmRlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICRzZXQudXNlUmVjb21tZW5kZWRPcmRlciA9IHVzZVJlY29tbWVuZGVkT3JkZXI7XG4gICAgfVxuXG4gICAgaWYgKGxhbmd1YWdlU3BlY2lmaWNhdGlvbnMpIHtcbiAgICAgICRzZXQubGFuZ3VhZ2VTcGVjaWZpY2F0aW9ucyA9IGxhbmd1YWdlU3BlY2lmaWNhdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2VNYXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICRzZXQuc291cmNlTWFwcyA9IEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcHMpO1xuICAgIH1cblxuICAgIGlmICgkc2V0LnBhcmFtZXRlcnMgfHwgJHNldC5hcHBsaWNhdGlvblR5cGVzIHx8ICRzZXQubGFuZ3VhZ2VTcGVjaWZpY2F0aW9ucyB8fFxuICAgICAgdHlwZW9mICRzZXQuYXJlU3Vic2NyaWJlcnNPcmRlcmVkICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVidWcgJiYgY29uc29sZS5sb2coJ1VwZGF0aW5nIHBhcmFtZXRlcnMgb2YgcHJvdGVjdGlvbicpO1xuICAgICAgY29uc3QgdXBkYXRlQXBwbGljYXRpb25SZXMgPSBhd2FpdCB0aGlzLnVwZGF0ZUFwcGxpY2F0aW9uKGNsaWVudCwgJHNldCk7XG4gICAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnRmluaXNoZWQgdXBkYXRpbmcgcGFyYW1ldGVycyBvZiBwcm90ZWN0aW9uJyk7XG4gICAgICBlcnJvckhhbmRsZXIodXBkYXRlQXBwbGljYXRpb25SZXMpO1xuICAgIH1cblxuICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdDcmVhdGluZyBBcHBsaWNhdGlvbiBQcm90ZWN0aW9uJyk7XG4gICAgY29uc3QgY3JlYXRlQXBwbGljYXRpb25Qcm90ZWN0aW9uUmVzID0gYXdhaXQgdGhpcy5jcmVhdGVBcHBsaWNhdGlvblByb3RlY3Rpb24oY2xpZW50LCBhcHBsaWNhdGlvbklkLCB1bmRlZmluZWQsIGJhaWwsIHJhbmRvbWl6YXRpb25TZWVkKTtcbiAgICBlcnJvckhhbmRsZXIoY3JlYXRlQXBwbGljYXRpb25Qcm90ZWN0aW9uUmVzKTtcblxuICAgIGNvbnN0IHByb3RlY3Rpb25JZCA9IGNyZWF0ZUFwcGxpY2F0aW9uUHJvdGVjdGlvblJlcy5kYXRhLmNyZWF0ZUFwcGxpY2F0aW9uUHJvdGVjdGlvbi5faWQ7XG4gICAgY29uc3QgcHJvdGVjdGlvbiA9IGF3YWl0IHRoaXMucG9sbFByb3RlY3Rpb24oY2xpZW50LCBhcHBsaWNhdGlvbklkLCBwcm90ZWN0aW9uSWQpO1xuICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdGaW5pc2hlZCBwcm90ZWN0aW5nJyk7XG5cbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICBwcm90ZWN0aW9uLnNvdXJjZXMuZm9yRWFjaChzID0+IHtcbiAgICAgIGlmIChzLmVycm9yTWVzc2FnZXMgJiYgcy5lcnJvck1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZXJyb3JzLnB1c2goLi4ucy5lcnJvck1lc3NhZ2VzLm1hcChlID0+ICh7XG4gICAgICAgICAgZmlsZW5hbWU6IHMuZmlsZW5hbWUsXG4gICAgICAgICAgLi4uZVxuICAgICAgICB9KSkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFiYWlsICYmIGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICBlcnJvcnMuZm9yRWFjaChlID0+IGNvbnNvbGUuZXJyb3IoYE5vbi1mYXRhbCBlcnJvcjogXCIke2UubWVzc2FnZX1cIiBpbiAke2UuZmlsZW5hbWV9YCkpO1xuICAgIH0gZWxzZSBpZiAoYmFpbCAmJiBwcm90ZWN0aW9uLnN0YXRlID09PSAnZXJyb3JlZCcpIHtcbiAgICAgIGVycm9ycy5mb3JFYWNoKGUgPT4gY29uc29sZS5lcnJvcihgRXJyb3I6IFwiJHtlLm1lc3NhZ2V9XCIgaW4gJHtlLmZpbGVuYW1lfSR7ZS5saW5lID8gYDoke2UubGluZX1gIDogJyd9YCkpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQcm90ZWN0aW9uIGZhaWxlZCcpO1xuICAgIH1cblxuICAgIGlmIChwcm90ZWN0aW9uLmRlcHJlY2F0aW9ucykge1xuICAgICAgcHJvdGVjdGlvbi5kZXByZWNhdGlvbnMuZm9yRWFjaChkZXByZWNhdGlvbiA9PiB7XG4gICAgICAgIGRlcHJlY2F0aW9uICYmIGNvbnNvbGUud2FybihgV2FybmluZzogT3B0aW9uICR7ZGVwcmVjYXRpb259IGlzIGRlcHJlY2F0ZWRgKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGRlYnVnICYmIGNvbnNvbGUubG9nKCdEb3dubG9hZGluZyBwcm90ZWN0aW9uIHJlc3VsdCcpO1xuICAgIGNvbnN0IGRvd25sb2FkID0gYXdhaXQgdGhpcy5kb3dubG9hZEFwcGxpY2F0aW9uUHJvdGVjdGlvbihjbGllbnQsIHByb3RlY3Rpb25JZCk7XG4gICAgZXJyb3JIYW5kbGVyKGRvd25sb2FkKTtcbiAgICBkZWJ1ZyAmJiBjb25zb2xlLmxvZygnVW56aXBwaW5nIGZpbGVzJyk7XG4gICAgdW56aXAoZG93bmxvYWQsIGZpbGVzRGVzdCB8fCBkZXN0Q2FsbGJhY2ssIHN0cmVhbSk7XG4gICAgZGVidWcgJiYgY29uc29sZS5sb2coJ0ZpbmlzaGVkIHVuemlwcGluZyBmaWxlcycpO1xuICAgIGNvbnNvbGUubG9nKHByb3RlY3Rpb25JZCk7XG4gIH0sXG5cbiAgYXN5bmMgZG93bmxvYWRTb3VyY2VNYXBzIChjb25maWdzLCBkZXN0Q2FsbGJhY2spIHtcbiAgICBjb25zdCB7XG4gICAgICBrZXlzLFxuICAgICAgaG9zdCxcbiAgICAgIHBvcnQsXG4gICAgICBwcm90b2NvbCxcbiAgICAgIGNhZmlsZSxcbiAgICAgIHN0cmVhbSA9IHRydWUsXG4gICAgICBmaWxlc0Rlc3QsXG4gICAgICBmaWxlc1NyYyxcbiAgICAgIHByb3RlY3Rpb25JZFxuICAgIH0gPSBjb25maWdzO1xuXG4gICAgY29uc3Qge1xuICAgICAgYWNjZXNzS2V5LFxuICAgICAgc2VjcmV0S2V5XG4gICAgfSA9IGtleXM7XG5cbiAgICBjb25zdCBjbGllbnQgPSBuZXcgdGhpcy5DbGllbnQoe1xuICAgICAgYWNjZXNzS2V5LFxuICAgICAgc2VjcmV0S2V5LFxuICAgICAgaG9zdCxcbiAgICAgIHBvcnQsXG4gICAgICBwcm90b2NvbCxcbiAgICAgIGNhZmlsZVxuICAgIH0pO1xuXG4gICAgaWYgKCFmaWxlc0Rlc3QgJiYgIWRlc3RDYWxsYmFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCAqZmlsZXNEZXN0KiBub3QgcHJvdmlkZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXByb3RlY3Rpb25JZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1aXJlZCAqcHJvdGVjdGlvbklkKiBub3QgcHJvdmlkZWQnKTtcbiAgICB9XG5cblxuICAgIGlmIChmaWxlc1NyYykge1xuICAgICAgY29uc29sZS5sb2coJ1tXYXJuaW5nXSBJZ25vcmluZyBzb3VyY2VzIHN1cHBsaWVkLiBEb3dubG9hZGluZyBzb3VyY2UgbWFwcyBvZiBnaXZlbiBwcm90ZWN0aW9uJyk7XG4gICAgfVxuICAgIGxldCBkb3dubG9hZDtcbiAgICB0cnkge1xuICAgICAgZG93bmxvYWQgPSBhd2FpdCB0aGlzLmRvd25sb2FkU291cmNlTWFwc1JlcXVlc3QoY2xpZW50LCBwcm90ZWN0aW9uSWQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9ySGFuZGxlcihlKTtcbiAgICB9XG4gICAgdW56aXAoZG93bmxvYWQsIGZpbGVzRGVzdCB8fCBkZXN0Q2FsbGJhY2ssIHN0cmVhbSk7XG4gIH0sXG5cbiAgYXN5bmMgcG9sbFByb3RlY3Rpb24gKGNsaWVudCwgYXBwbGljYXRpb25JZCwgcHJvdGVjdGlvbklkKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG5cbiAgICBjb25zdCBwb2xsID0gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgYXBwbGljYXRpb25Qcm90ZWN0aW9uID0gYXdhaXQgdGhpcy5nZXRBcHBsaWNhdGlvblByb3RlY3Rpb24oY2xpZW50LCBhcHBsaWNhdGlvbklkLCBwcm90ZWN0aW9uSWQpO1xuICAgICAgaWYgKGFwcGxpY2F0aW9uUHJvdGVjdGlvbi5lcnJvcnMpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIHBvbGxpbmcgcHJvdGVjdGlvbicsIGFwcGxpY2F0aW9uUHJvdGVjdGlvbi5lcnJvcnMpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHBvbGxpbmcgcHJvdGVjdGlvbicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBhcHBsaWNhdGlvblByb3RlY3Rpb24uZGF0YS5hcHBsaWNhdGlvblByb3RlY3Rpb24uc3RhdGU7XG4gICAgICAgIGNvbnN0IGJhaWwgPSBhcHBsaWNhdGlvblByb3RlY3Rpb24uZGF0YS5hcHBsaWNhdGlvblByb3RlY3Rpb24uYmFpbDtcbiAgICAgICAgaWYgKHN0YXRlICE9PSAnZmluaXNoZWQnICYmIHN0YXRlICE9PSAnZXJyb3JlZCcgJiYgc3RhdGUgIT09ICdjYW5jZWxlZCcpIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KHBvbGwsIDUwMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdlcnJvcmVkJyAmJiAhYmFpbCkge1xuICAgICAgICAgIGNvbnN0IHVybCA9IGBodHRwczovL2FwcC5qc2NyYW1ibGVyLmNvbS9hcHAvJHthcHBsaWNhdGlvbklkfS9wcm90ZWN0aW9ucy8ke3Byb3RlY3Rpb25JZH1gO1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdChgUHJvdGVjdGlvbiBmYWlsZWQuIEZvciBtb3JlIGluZm9ybWF0aW9uIHZpc2l0OiAke3VybH1gKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ2NhbmNlbGVkJykge1xuICAgICAgICAgIGRlZmVycmVkLnJlamVjdCgnUHJvdGVjdGlvbiBjYW5jZWxlZCBieSB1c2VyJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShhcHBsaWNhdGlvblByb3RlY3Rpb24uZGF0YS5hcHBsaWNhdGlvblByb3RlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHBvbGwoKTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyBjcmVhdGVBcHBsaWNhdGlvbiAoY2xpZW50LCBkYXRhLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgY3JlYXRlQXBwbGljYXRpb24oZGF0YSwgZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIGR1cGxpY2F0ZUFwcGxpY2F0aW9uIChjbGllbnQsIGRhdGEsIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5wb3N0KCcvYXBwbGljYXRpb24nLCBkdXBsaWNhdGVBcHBsaWNhdGlvbihkYXRhLCBmcmFnbWVudHMpLCByZXNwb25zZUhhbmRsZXIoZGVmZXJyZWQpKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfSxcbiAgLy9cbiAgYXN5bmMgcmVtb3ZlQXBwbGljYXRpb24gKGNsaWVudCwgaWQpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgcmVtb3ZlQXBwbGljYXRpb24oaWQpLCByZXNwb25zZUhhbmRsZXIoZGVmZXJyZWQpKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfSxcbiAgLy9cbiAgYXN5bmMgcmVtb3ZlUHJvdGVjdGlvbiAoY2xpZW50LCBpZCwgYXBwSWQsIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5wb3N0KCcvYXBwbGljYXRpb24nLCByZW1vdmVQcm90ZWN0aW9uKGlkLCBhcHBJZCwgZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIGNhbmNlbFByb3RlY3Rpb24gKGNsaWVudCwgaWQsIGFwcElkLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgY2FuY2VsUHJvdGVjdGlvbihpZCwgYXBwSWQsIGZyYWdtZW50cyksIHJlc3BvbnNlSGFuZGxlcihkZWZlcnJlZCkpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyB1cGRhdGVBcHBsaWNhdGlvbiAoY2xpZW50LCBhcHBsaWNhdGlvbiwgZnJhZ21lbnRzKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG4gICAgY2xpZW50LnBvc3QoJy9hcHBsaWNhdGlvbicsIHVwZGF0ZUFwcGxpY2F0aW9uKGFwcGxpY2F0aW9uLCBmcmFnbWVudHMpLCByZXNwb25zZUhhbmRsZXIoZGVmZXJyZWQpKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfSxcbiAgLy9cbiAgYXN5bmMgdW5sb2NrQXBwbGljYXRpb24gKGNsaWVudCwgYXBwbGljYXRpb24sIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5wb3N0KCcvYXBwbGljYXRpb24nLCB1bmxvY2tBcHBsaWNhdGlvbihhcHBsaWNhdGlvbiwgZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIGdldEFwcGxpY2F0aW9uIChjbGllbnQsIGFwcGxpY2F0aW9uSWQsIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5nZXQoJy9hcHBsaWNhdGlvbicsIGdldEFwcGxpY2F0aW9uKGFwcGxpY2F0aW9uSWQsIGZyYWdtZW50cyksIHJlc3BvbnNlSGFuZGxlcihkZWZlcnJlZCkpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyBnZXRBcHBsaWNhdGlvblNvdXJjZSAoY2xpZW50LCBzb3VyY2VJZCwgZnJhZ21lbnRzLCBsaW1pdHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQuZ2V0KCcvYXBwbGljYXRpb24nLCBnZXRBcHBsaWNhdGlvblNvdXJjZShzb3VyY2VJZCwgZnJhZ21lbnRzLCBsaW1pdHMpLCByZXNwb25zZUhhbmRsZXIoZGVmZXJyZWQpKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfSxcbiAgLy9cbiAgYXN5bmMgZ2V0QXBwbGljYXRpb25Qcm90ZWN0aW9ucyAoY2xpZW50LCBhcHBsaWNhdGlvbklkLCBwYXJhbXMsIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5nZXQoJy9hcHBsaWNhdGlvbicsIGdldEFwcGxpY2F0aW9uUHJvdGVjdGlvbnMoYXBwbGljYXRpb25JZCwgcGFyYW1zLCBmcmFnbWVudHMpLCByZXNwb25zZUhhbmRsZXIoZGVmZXJyZWQpKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfSxcbiAgLy9cbiAgYXN5bmMgZ2V0QXBwbGljYXRpb25Qcm90ZWN0aW9uc0NvdW50IChjbGllbnQsIGFwcGxpY2F0aW9uSWQsIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5nZXQoJy9hcHBsaWNhdGlvbicsIGdldEFwcGxpY2F0aW9uUHJvdGVjdGlvbnNDb3VudChhcHBsaWNhdGlvbklkLCBmcmFnbWVudHMpLCByZXNwb25zZUhhbmRsZXIoZGVmZXJyZWQpKTtcbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfSxcbiAgLy9cbiAgYXN5bmMgY3JlYXRlVGVtcGxhdGUgKGNsaWVudCwgdGVtcGxhdGUsIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5wb3N0KCcvYXBwbGljYXRpb24nLCBjcmVhdGVUZW1wbGF0ZSh0ZW1wbGF0ZSwgZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIHJlbW92ZVRlbXBsYXRlIChjbGllbnQsIGlkKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG4gICAgY2xpZW50LnBvc3QoJy9hcHBsaWNhdGlvbicsIHJlbW92ZVRlbXBsYXRlKGlkKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIGdldFRlbXBsYXRlcyAoY2xpZW50LCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQuZ2V0KCcvYXBwbGljYXRpb24nLCBnZXRUZW1wbGF0ZXMoZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIGdldEFwcGxpY2F0aW9ucyAoY2xpZW50LCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQuZ2V0KCcvYXBwbGljYXRpb24nLCBnZXRBcHBsaWNhdGlvbnMoZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIGFkZEFwcGxpY2F0aW9uU291cmNlIChjbGllbnQsIGFwcGxpY2F0aW9uSWQsIGFwcGxpY2F0aW9uU291cmNlLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgYWRkQXBwbGljYXRpb25Tb3VyY2UoYXBwbGljYXRpb25JZCwgYXBwbGljYXRpb25Tb3VyY2UsIGZyYWdtZW50cyksIHJlc3BvbnNlSGFuZGxlcihkZWZlcnJlZCkpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyBhZGRBcHBsaWNhdGlvblNvdXJjZUZyb21VUkwgKGNsaWVudCwgYXBwbGljYXRpb25JZCwgdXJsLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICByZXR1cm4gZ2V0RmlsZUZyb21VcmwoY2xpZW50LCB1cmwpXG4gICAgICAudGhlbihmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgYWRkQXBwbGljYXRpb25Tb3VyY2UoYXBwbGljYXRpb25JZCwgZmlsZSwgZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgfSk7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIHVwZGF0ZUFwcGxpY2F0aW9uU291cmNlIChjbGllbnQsIGFwcGxpY2F0aW9uU291cmNlLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgdXBkYXRlQXBwbGljYXRpb25Tb3VyY2UoYXBwbGljYXRpb25Tb3VyY2UsIGZyYWdtZW50cyksIHJlc3BvbnNlSGFuZGxlcihkZWZlcnJlZCkpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyByZW1vdmVTb3VyY2VGcm9tQXBwbGljYXRpb24gKGNsaWVudCwgc291cmNlSWQsIGFwcGxpY2F0aW9uSWQsIGZyYWdtZW50cykge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5wb3N0KCcvYXBwbGljYXRpb24nLCByZW1vdmVTb3VyY2VGcm9tQXBwbGljYXRpb24oc291cmNlSWQsIGFwcGxpY2F0aW9uSWQsIGZyYWdtZW50cyksIHJlc3BvbnNlSGFuZGxlcihkZWZlcnJlZCkpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyBhcHBseVRlbXBsYXRlIChjbGllbnQsIHRlbXBsYXRlSWQsIGFwcElkLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgYXBwbHlUZW1wbGF0ZSh0ZW1wbGF0ZUlkLCBhcHBJZCwgZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIHVwZGF0ZVRlbXBsYXRlIChjbGllbnQsIHRlbXBsYXRlLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQucG9zdCgnL2FwcGxpY2F0aW9uJywgdXBkYXRlVGVtcGxhdGUodGVtcGxhdGUsIGZyYWdtZW50cyksIHJlc3BvbnNlSGFuZGxlcihkZWZlcnJlZCkpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyBjcmVhdGVBcHBsaWNhdGlvblByb3RlY3Rpb24gKGNsaWVudCwgYXBwbGljYXRpb25JZCwgZnJhZ21lbnRzLCBiYWlsLCByYW5kb21pemF0aW9uU2VlZCkge1xuICAgIGNvbnN0IGRlZmVycmVkID0gUS5kZWZlcigpO1xuICAgIGNsaWVudC5wb3N0KCcvYXBwbGljYXRpb24nLCBjcmVhdGVBcHBsaWNhdGlvblByb3RlY3Rpb24oYXBwbGljYXRpb25JZCwgZnJhZ21lbnRzLCBiYWlsLCByYW5kb21pemF0aW9uU2VlZCksIHJlc3BvbnNlSGFuZGxlcihkZWZlcnJlZCkpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyBnZXRBcHBsaWNhdGlvblByb3RlY3Rpb24gKGNsaWVudCwgYXBwbGljYXRpb25JZCwgcHJvdGVjdGlvbklkLCBmcmFnbWVudHMpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQuZ2V0KCcvYXBwbGljYXRpb24nLCBnZXRQcm90ZWN0aW9uKGFwcGxpY2F0aW9uSWQsIHByb3RlY3Rpb25JZCwgZnJhZ21lbnRzKSwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH0sXG4gIC8vXG4gIGFzeW5jIGRvd25sb2FkU291cmNlTWFwc1JlcXVlc3QgKGNsaWVudCwgcHJvdGVjdGlvbklkKSB7XG4gICAgY29uc3QgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG4gICAgY2xpZW50LmdldChgL2FwcGxpY2F0aW9uL3NvdXJjZU1hcHMvJHtwcm90ZWN0aW9uSWR9YCwgbnVsbCwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSwgZmFsc2UpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9LFxuICAvL1xuICBhc3luYyBkb3dubG9hZEFwcGxpY2F0aW9uUHJvdGVjdGlvbiAoY2xpZW50LCBwcm90ZWN0aW9uSWQpIHtcbiAgICBjb25zdCBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcbiAgICBjbGllbnQuZ2V0KGAvYXBwbGljYXRpb24vZG93bmxvYWQvJHtwcm90ZWN0aW9uSWR9YCwgbnVsbCwgcmVzcG9uc2VIYW5kbGVyKGRlZmVycmVkKSwgZmFsc2UpO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRGaWxlRnJvbVVybCAoY2xpZW50LCB1cmwpIHtcbiAgY29uc3QgZGVmZXJyZWQgPSBRLmRlZmVyKCk7XG4gIHZhciBmaWxlO1xuICByZXF1ZXN0LmdldCh1cmwpXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgZmlsZSA9IHtcbiAgICAgICAgY29udGVudDogcmVzLmRhdGEsXG4gICAgICAgIGZpbGVuYW1lOiBwYXRoLmJhc2VuYW1lKHVybCksXG4gICAgICAgIGV4dGVuc2lvbjogcGF0aC5leHRuYW1lKHVybCkuc3Vic3RyKDEpXG4gICAgICB9O1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZShmaWxlKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cbmZ1bmN0aW9uIHJlc3BvbnNlSGFuZGxlciAoZGVmZXJyZWQpIHtcbiAgcmV0dXJuIChlcnIsIHJlcykgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYm9keSA9IHJlcy5kYXRhO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGJvZHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoYm9keSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGRlZmVycmVkLnJlamVjdChib2R5KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVycm9ySGFuZGxlciAocmVzKSB7XG4gIGlmIChyZXMuZXJyb3JzICYmIHJlcy5lcnJvcnMubGVuZ3RoKSB7XG4gICAgcmVzLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlcy5tZXNzYWdlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHJlcy5tZXNzYWdlKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhcmFtZXRlcnMgKHBhcmFtZXRlcnMpIHtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkocGFyYW1ldGVycykpIHtcbiAgICByZXN1bHQgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIG9wdGlvbnM6IHBhcmFtZXRlcnNbbmFtZV1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IHBhcmFtZXRlcnM7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19
